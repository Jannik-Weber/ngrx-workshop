"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TaskOrderer {
    constructor(target, projectGraph) {
        this.target = target;
        this.projectGraph = projectGraph;
    }
    splitTasksIntoStages(tasks) {
        if (this.target !== 'build')
            return [tasks];
        if (tasks.length === 0)
            return [];
        const res = [];
        this.topologicallySortTasks(tasks).forEach(t => {
            const stageWithNoDeps = res.find(tasksInStage => !this.taskDependsOnDeps(t, tasksInStage));
            if (stageWithNoDeps) {
                stageWithNoDeps.push(t);
            }
            else {
                res.push([t]);
            }
        });
        return res;
    }
    taskDependsOnDeps(task, deps) {
        const g = this.projectGraph;
        function hasDep(source, target, visitedProjects) {
            if (!g.dependencies[source]) {
                return false;
            }
            if (g.dependencies[source].find(d => d.target === target)) {
                return true;
            }
            return !!g.dependencies[source].find(r => {
                if (visitedProjects.indexOf(r.target) > -1)
                    return null;
                return hasDep(r.target, target, [...visitedProjects, r.target]);
            });
        }
        return !!deps.find(dep => hasDep(task.target.project, dep.target.project, []));
    }
    topologicallySortTasks(tasks) {
        const sortedTasks = [...tasks];
        sortedTasks.sort((a, b) => {
            if (this.taskDependsOnDeps(a, [b]))
                return 1;
            if (this.taskDependsOnDeps(b, [a]))
                return -1;
            return 0;
        });
        return sortedTasks;
    }
}
exports.TaskOrderer = TaskOrderer;
