{"version":3,"sources":["D:/bak/beratung/angular2/workshops_advanced/advanced-nx-workspace/node_modules/angular-oauth2-oidc/fesm2015/angular-oauth2-oidc.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAepFD,mGAGC;;;;;;;;;;;;;;;;;;;;;;kCAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyID,oIAGC;;;;;;;;;;;;kCAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuQD;;;;;;;;;0BAOC","file":"angular-oauth2-oidc.js","sourcesContent":["import { Injectable, NgZone, Optional, NgModule, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpHeaders, HttpParams, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport { Subject, of, from, race, throwError, merge } from 'rxjs';\nimport { filter, tap, delay, switchMap, map, first, catchError, timeout, take, mergeMap } from 'rxjs/operators';\nimport { KEYUTIL, KJUR } from 'jsrsasign';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Additional options that can be passt to tryLogin.\r\n */\r\nclass LoginOptions {\r\n    constructor() {\r\n        /**\r\n         * Normally, you want to clear your hash fragment after\r\n         * the lib read the token(s) so that they are not displayed\r\n         * anymore in the url. If not, set this to true.\r\n         */\r\n        this.preventClearHashAfterLogin = false;\r\n    }\r\n}\r\n/**\r\n * Defines the logging interface the OAuthService uses\r\n * internally. Is compatible with the `console` object,\r\n * but you can provide your own implementation as well\r\n * through dependency injection.\r\n * @abstract\r\n */\r\nclass OAuthLogger {\r\n}\r\n/**\r\n * Defines a simple storage that can be used for\r\n * storing the tokens at client side.\r\n * Is compatible to localStorage and sessionStorage,\r\n * but you can also create your own implementations.\r\n * @abstract\r\n */\r\nclass OAuthStorage {\r\n}\r\n/**\r\n * Represents the received tokens, the received state\r\n * and the parsed claims from the id-token.\r\n */\r\nclass ReceivedTokens {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction b64DecodeUnicode(str) {\r\n    /** @type {?} */\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n    return decodeURIComponent(atob(base64)\r\n        .split('')\r\n        .map((/**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }))\r\n        .join(''));\r\n}\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction base64UrlEncode(str) {\r\n    /** @type {?} */\r\n    const base64 = btoa(str);\r\n    return base64\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_')\r\n        .replace(/=/g, '');\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Interface for Handlers that are hooked in to\r\n * validate tokens.\r\n * @abstract\r\n */\r\nclass ValidationHandler {\r\n}\r\n/**\r\n * This abstract implementation of ValidationHandler already implements\r\n * the method validateAtHash. However, to make use of it,\r\n * you have to override the method calcHash.\r\n * @abstract\r\n */\r\nclass AbstractValidationHandler {\r\n    /**\r\n     * Validates the at_hash in an id_token against the received access_token.\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    validateAtHash(params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /** @type {?} */\r\n            let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\r\n            /** @type {?} */\r\n            let tokenHash = yield this.calcHash(params.accessToken, hashAlg);\r\n            // sha256(accessToken, { asString: true });\r\n            /** @type {?} */\r\n            let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\r\n            /** @type {?} */\r\n            let atHash = base64UrlEncode(leftMostHalf);\r\n            /** @type {?} */\r\n            let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\r\n            if (atHash !== claimsAtHash) {\r\n                console.error('exptected at_hash: ' + atHash);\r\n                console.error('actual at_hash: ' + claimsAtHash);\r\n            }\r\n            return atHash === claimsAtHash;\r\n        });\r\n    }\r\n    /**\r\n     * Infers the name of the hash algorithm to use\r\n     * from the alg field of an id_token.\r\n     *\r\n     * @protected\r\n     * @param {?} jwtHeader the id_token's parsed header\r\n     * @return {?}\r\n     */\r\n    inferHashAlgorithm(jwtHeader) {\r\n        /** @type {?} */\r\n        let alg = jwtHeader['alg'];\r\n        if (!alg.match(/^.S[0-9]{3}$/)) {\r\n            throw new Error('Algorithm not supported: ' + alg);\r\n        }\r\n        return 'sha-' + alg.substr(2);\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass UrlHelperService {\r\n    /**\r\n     * @param {?=} customHashFragment\r\n     * @return {?}\r\n     */\r\n    getHashFragmentParams(customHashFragment) {\r\n        /** @type {?} */\r\n        let hash = customHashFragment || window.location.hash;\r\n        hash = decodeURIComponent(hash);\r\n        if (hash.indexOf('#') !== 0) {\r\n            return {};\r\n        }\r\n        /** @type {?} */\r\n        const questionMarkPosition = hash.indexOf('?');\r\n        if (questionMarkPosition > -1) {\r\n            hash = hash.substr(questionMarkPosition + 1);\r\n        }\r\n        else {\r\n            hash = hash.substr(1);\r\n        }\r\n        return this.parseQueryString(hash);\r\n    }\r\n    /**\r\n     * @param {?} queryString\r\n     * @return {?}\r\n     */\r\n    parseQueryString(queryString) {\r\n        /** @type {?} */\r\n        const data = {};\r\n        /** @type {?} */\r\n        let pairs;\r\n        /** @type {?} */\r\n        let pair;\r\n        /** @type {?} */\r\n        let separatorIndex;\r\n        /** @type {?} */\r\n        let escapedKey;\r\n        /** @type {?} */\r\n        let escapedValue;\r\n        /** @type {?} */\r\n        let key;\r\n        /** @type {?} */\r\n        let value;\r\n        if (queryString === null) {\r\n            return data;\r\n        }\r\n        pairs = queryString.split('&');\r\n        for (let i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n            separatorIndex = pair.indexOf('=');\r\n            if (separatorIndex === -1) {\r\n                escapedKey = pair;\r\n                escapedValue = null;\r\n            }\r\n            else {\r\n                escapedKey = pair.substr(0, separatorIndex);\r\n                escapedValue = pair.substr(separatorIndex + 1);\r\n            }\r\n            key = decodeURIComponent(escapedKey);\r\n            value = decodeURIComponent(escapedValue);\r\n            if (key.substr(0, 1) === '/') {\r\n                key = key.substr(1);\r\n            }\r\n            data[key] = value;\r\n        }\r\n        return data;\r\n    }\r\n}\r\nUrlHelperService.decorators = [\r\n    { type: Injectable }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass OAuthEvent {\r\n    /**\r\n     * @param {?} type\r\n     */\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n}\r\nclass OAuthSuccessEvent extends OAuthEvent {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} info\r\n     */\r\n    constructor(type, info = null) {\r\n        super(type);\r\n        this.info = info;\r\n    }\r\n}\r\nclass OAuthInfoEvent extends OAuthEvent {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} info\r\n     */\r\n    constructor(type, info = null) {\r\n        super(type);\r\n        this.info = info;\r\n    }\r\n}\r\nclass OAuthErrorEvent extends OAuthEvent {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} reason\r\n     * @param {?=} params\r\n     */\r\n    constructor(type, reason, params = null) {\r\n        super(type);\r\n        this.reason = reason;\r\n        this.params = params;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass AuthConfig {\r\n    /**\r\n     * @param {?=} json\r\n     */\r\n    constructor(json) {\r\n        /**\r\n         * The client's id as registered with the auth server\r\n         */\r\n        this.clientId = '';\r\n        /**\r\n         * The client's redirectUri as registered with the auth server\r\n         */\r\n        this.redirectUri = '';\r\n        /**\r\n         * An optional second redirectUri where the auth server\r\n         * redirects the user to after logging out.\r\n         */\r\n        this.postLogoutRedirectUri = '';\r\n        /**\r\n         * The auth server's endpoint that allows to log\r\n         * the user in when using implicit flow.\r\n         */\r\n        this.loginUrl = '';\r\n        /**\r\n         * The requested scopes\r\n         */\r\n        this.scope = 'openid profile';\r\n        this.resource = '';\r\n        this.rngUrl = '';\r\n        /**\r\n         * Defines whether to use OpenId Connect during\r\n         * implicit flow.\r\n         */\r\n        this.oidc = true;\r\n        /**\r\n         * Defines whether to request an access token during\r\n         * implicit flow.\r\n         */\r\n        this.requestAccessToken = true;\r\n        this.options = null;\r\n        /**\r\n         * The issuer's uri.\r\n         */\r\n        this.issuer = '';\r\n        /**\r\n         * The logout url.\r\n         */\r\n        this.logoutUrl = '';\r\n        /**\r\n         * Defines whether to clear the hash fragment after logging in.\r\n         */\r\n        this.clearHashAfterLogin = true;\r\n        /**\r\n         * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\r\n         */\r\n        this.tokenEndpoint = null;\r\n        /**\r\n         * Url of the userinfo endpoint as defined by OpenId Connect.\r\n         */\r\n        this.userinfoEndpoint = null;\r\n        this.responseType = '';\r\n        /**\r\n         * Defines whether additional debug information should\r\n         * be shown at the console. Note that in certain browsers\r\n         * the verbosity of the console needs to be explicitly set\r\n         * to include Debug level messages.\r\n         */\r\n        this.showDebugInformation = false;\r\n        /**\r\n         * The redirect uri used when doing silent refresh.\r\n         */\r\n        this.silentRefreshRedirectUri = '';\r\n        this.silentRefreshMessagePrefix = '';\r\n        /**\r\n         * Set this to true to display the iframe used for\r\n         * silent refresh for debugging.\r\n         */\r\n        this.silentRefreshShowIFrame = false;\r\n        /**\r\n         * Timeout for silent refresh.\r\n         * \\@internal\r\n         * depreacted b/c of typo, see silentRefreshTimeout\r\n         */\r\n        this.siletRefreshTimeout = 1000 * 20;\r\n        /**\r\n         * Timeout for silent refresh.\r\n         */\r\n        this.silentRefreshTimeout = 1000 * 20;\r\n        /**\r\n         * Some auth servers don't allow using password flow\r\n         * w/o a client secret while the standards do not\r\n         * demand for it. In this case, you can set a password\r\n         * here. As this password is exposed to the public\r\n         * it does not bring additional security and is therefore\r\n         * as good as using no password.\r\n         */\r\n        this.dummyClientSecret = null;\r\n        /**\r\n         * Defines whether https is required.\r\n         * The default value is remoteOnly which only allows\r\n         * http for localhost, while every other domains need\r\n         * to be used with https.\r\n         */\r\n        this.requireHttps = 'remoteOnly';\r\n        /**\r\n         * Defines whether every url provided by the discovery\r\n         * document has to start with the issuer's url.\r\n         */\r\n        this.strictDiscoveryDocumentValidation = true;\r\n        /**\r\n         * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\r\n         * with keys used to validate received id_tokens.\r\n         * This is taken out of the disovery document. Can be set manually too.\r\n         */\r\n        this.jwks = null;\r\n        /**\r\n         * Map with additional query parameter that are appended to\r\n         * the request when initializing implicit flow.\r\n         */\r\n        this.customQueryParams = null;\r\n        this.silentRefreshIFrameName = 'angular-oauth-oidc-silent-refresh-iframe';\r\n        /**\r\n         * Defines when the token_timeout event should be raised.\r\n         * If you set this to the default value 0.75, the event\r\n         * is triggered after 75% of the token's life time.\r\n         */\r\n        this.timeoutFactor = 0.75;\r\n        /**\r\n         * If true, the lib will try to check whether the user\r\n         * is still logged in on a regular basis as described\r\n         * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n         */\r\n        this.sessionChecksEnabled = false;\r\n        /**\r\n         * Interval in msec for checking the session\r\n         * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n         */\r\n        this.sessionCheckIntervall = 3 * 1000;\r\n        /**\r\n         * Url for the iframe used for session checks\r\n         */\r\n        this.sessionCheckIFrameUrl = null;\r\n        /**\r\n         * Name of the iframe to use for session checks\r\n         */\r\n        this.sessionCheckIFrameName = 'angular-oauth-oidc-check-session-iframe';\r\n        /**\r\n         * This property has been introduced to disable at_hash checks\r\n         * and is indented for Identity Provider that does not deliver\r\n         * an at_hash EVEN THOUGH its recommended by the OIDC specs.\r\n         * Of course, when disabling these checks the we are bypassing\r\n         * a security check which means we are more vulnerable.\r\n         */\r\n        this.disableAtHashCheck = false;\r\n        /**\r\n         * Defines wether to check the subject of a refreshed token after silent refresh.\r\n         * Normally, it should be the same as before.\r\n         */\r\n        this.skipSubjectCheck = false;\r\n        this.useIdTokenHintForSilentRefresh = false;\r\n        /**\r\n         * Defined whether to skip the validation of the issuer in the discovery document.\r\n         * Normally, the discovey document's url starts with the url of the issuer.\r\n         */\r\n        this.skipIssuerCheck = false;\r\n        /**\r\n         * final state sent to issuer is built as follows:\r\n         * state = nonce + nonceStateSeparator + additional state\r\n         * Default separator is ';' (encoded %3B).\r\n         * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\r\n         */\r\n        this.nonceStateSeparator = ';';\r\n        /**\r\n         * Set this to true to use HTTP BASIC auth for password flow\r\n         */\r\n        this.useHttpBasicAuth = false;\r\n        /**\r\n         * The interceptors waits this time span if there is no token\r\n         */\r\n        this.waitForTokenInMsec = 0;\r\n        /**\r\n         * Code Flow is by defauld used together with PKCI which is also higly recommented.\r\n         * You can disbale it here by setting this flag to true.\r\n         * https://tools.ietf.org/html/rfc7636#section-1.1\r\n         */\r\n        this.disablePKCE = false;\r\n        /**\r\n         * This property allows you to override the method that is used to open the login url,\r\n         * allowing a way for implementations to specify their own method of routing to new\r\n         * urls.\r\n         */\r\n        this.openUri = (/**\r\n         * @param {?} uri\r\n         * @return {?}\r\n         */\r\n        uri => {\r\n            location.href = uri;\r\n        });\r\n        if (json) {\r\n            Object.assign(this, json);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * This custom encoder allows charactes like +, % and / to be used in passwords\r\n */\r\nclass WebHttpUrlEncodingCodec {\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Abstraction for crypto algorithms\r\n * @abstract\r\n */\r\nclass CryptoHandler {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Service for logging in and logging out with\r\n * OIDC and OAuth2. Supports implicit flow and\r\n * password flow.\r\n */\r\nclass OAuthService extends AuthConfig {\r\n    /**\r\n     * @param {?} ngZone\r\n     * @param {?} http\r\n     * @param {?} storage\r\n     * @param {?} tokenValidationHandler\r\n     * @param {?} config\r\n     * @param {?} urlHelper\r\n     * @param {?} logger\r\n     * @param {?} crypto\r\n     */\r\n    constructor(ngZone, http, storage, tokenValidationHandler, config, urlHelper, logger, crypto) {\r\n        super();\r\n        this.ngZone = ngZone;\r\n        this.http = http;\r\n        this.config = config;\r\n        this.urlHelper = urlHelper;\r\n        this.logger = logger;\r\n        this.crypto = crypto;\r\n        /**\r\n         * \\@internal\r\n         * Deprecated:  use property events instead\r\n         */\r\n        this.discoveryDocumentLoaded = false;\r\n        /**\r\n         * The received (passed around) state, when logging\r\n         * in with implicit flow.\r\n         */\r\n        this.state = '';\r\n        this.eventsSubject = new Subject();\r\n        this.discoveryDocumentLoadedSubject = new Subject();\r\n        this.grantTypesSupported = [];\r\n        this.inImplicitFlow = false;\r\n        this.debug('angular-oauth2-oidc v8-beta');\r\n        this.discoveryDocumentLoaded$ = this.discoveryDocumentLoadedSubject.asObservable();\r\n        this.events = this.eventsSubject.asObservable();\r\n        if (tokenValidationHandler) {\r\n            this.tokenValidationHandler = tokenValidationHandler;\r\n        }\r\n        if (config) {\r\n            this.configure(config);\r\n        }\r\n        try {\r\n            if (storage) {\r\n                this.setStorage(storage);\r\n            }\r\n            else if (typeof sessionStorage !== 'undefined') {\r\n                this.setStorage(sessionStorage);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('No OAuthStorage provided and cannot access default (sessionStorage).'\r\n                + 'Consider providing a custom OAuthStorage implementation in your module.', e);\r\n        }\r\n        this.setupRefreshTimer();\r\n    }\r\n    /**\r\n     * Use this method to configure the service\r\n     * @param {?} config the configuration\r\n     * @return {?}\r\n     */\r\n    configure(config) {\r\n        // For the sake of downward compatibility with\r\n        // original configuration API\r\n        Object.assign(this, new AuthConfig(), config);\r\n        this.config = Object.assign((/** @type {?} */ ({})), new AuthConfig(), config);\r\n        if (this.sessionChecksEnabled) {\r\n            this.setupSessionCheck();\r\n        }\r\n        this.configChanged();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    configChanged() {\r\n        this.setupRefreshTimer();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    restartSessionChecksIfStillLoggedIn() {\r\n        if (this.hasValidIdToken()) {\r\n            this.initSessionCheck();\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    restartRefreshTimerIfStillLoggedIn() {\r\n        this.setupExpirationTimers();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupSessionCheck() {\r\n        this.events.pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.type === 'token_received'))).subscribe((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => {\r\n            this.initSessionCheck();\r\n        }));\r\n    }\r\n    /**\r\n     * Will setup up silent refreshing for when the token is\r\n     * about to expire. When the user is logged out via this.logOut method, the\r\n     * silent refreshing will pause and not refresh the tokens until the user is\r\n     * logged back in via receiving a new token.\r\n     * @param {?=} params Additional parameter to pass\r\n     * @param {?=} listenTo Setup automatic refresh of a specific token type\r\n     * @param {?=} noPrompt\r\n     * @return {?}\r\n     */\r\n    setupAutomaticSilentRefresh(params = {}, listenTo, noPrompt = true) {\r\n        /** @type {?} */\r\n        let shouldRunSilentRefresh = true;\r\n        this.events.pipe(tap((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        (e) => {\r\n            if (e.type === 'token_received') {\r\n                shouldRunSilentRefresh = true;\r\n            }\r\n            else if (e.type === 'logout') {\r\n                shouldRunSilentRefresh = false;\r\n            }\r\n        })), filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.type === 'token_expires'))).subscribe((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => {\r\n            /** @type {?} */\r\n            const event = (/** @type {?} */ (e));\r\n            if ((listenTo == null || listenTo === 'any' || event.info === listenTo) && shouldRunSilentRefresh) {\r\n                // this.silentRefresh(params, noPrompt).catch(_ => {\r\n                this.refreshInternal(params, noPrompt).catch((/**\r\n                 * @param {?} _\r\n                 * @return {?}\r\n                 */\r\n                _ => {\r\n                    this.debug('Automatic silent refresh did not work');\r\n                }));\r\n            }\r\n        }));\r\n        this.restartRefreshTimerIfStillLoggedIn();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} params\r\n     * @param {?} noPrompt\r\n     * @return {?}\r\n     */\r\n    refreshInternal(params, noPrompt) {\r\n        if (this.responseType === 'code') {\r\n            return this.refreshToken();\r\n        }\r\n        else {\r\n            return this.silentRefresh(params, noPrompt);\r\n        }\r\n    }\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocument(...)` and\r\n     * directly chains using the `then(...)` part of the promise to call\r\n     * the `tryLogin(...)` method.\r\n     *\r\n     * @param {?=} options LoginOptions to pass through to `tryLogin(...)`\r\n     * @return {?}\r\n     */\r\n    loadDiscoveryDocumentAndTryLogin(options = null) {\r\n        return this.loadDiscoveryDocument().then((/**\r\n         * @param {?} doc\r\n         * @return {?}\r\n         */\r\n        doc => {\r\n            return this.tryLogin(options);\r\n        }));\r\n    }\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocumentAndTryLogin(...)`\r\n     * and if then chains to `initImplicitFlow()`, but only if there is no valid\r\n     * IdToken or no valid AccessToken.\r\n     *\r\n     * @param {?=} options LoginOptions to pass through to `tryLogin(...)`\r\n     * @return {?}\r\n     */\r\n    loadDiscoveryDocumentAndLogin(options = null) {\r\n        return this.loadDiscoveryDocumentAndTryLogin(options).then((/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        _ => {\r\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\r\n                this.initImplicitFlow();\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    debug(...args) {\r\n        if (this.showDebugInformation) {\r\n            this.logger.debug.apply(console, args);\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    validateUrlFromDiscoveryDocument(url) {\r\n        /** @type {?} */\r\n        const errors = [];\r\n        /** @type {?} */\r\n        const httpsCheck = this.validateUrlForHttps(url);\r\n        /** @type {?} */\r\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\r\n        if (!httpsCheck) {\r\n            errors.push('https for all urls required. Also for urls received by discovery.');\r\n        }\r\n        if (!issuerCheck) {\r\n            errors.push('Every url in discovery document has to start with the issuer url.' +\r\n                'Also see property strictDiscoveryDocumentValidation.');\r\n        }\r\n        return errors;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    validateUrlForHttps(url) {\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        /** @type {?} */\r\n        const lcUrl = url.toLowerCase();\r\n        if (this.requireHttps === false) {\r\n            return true;\r\n        }\r\n        if ((lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\r\n            lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\r\n            this.requireHttps === 'remoteOnly') {\r\n            return true;\r\n        }\r\n        return lcUrl.startsWith('https://');\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    validateUrlAgainstIssuer(url) {\r\n        if (!this.strictDiscoveryDocumentValidation) {\r\n            return true;\r\n        }\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupRefreshTimer() {\r\n        if (typeof window === 'undefined') {\r\n            this.debug('timer not supported on this plattform');\r\n            return;\r\n        }\r\n        if (this.hasValidIdToken()) {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        }\r\n        this.events.pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.type === 'token_received'))).subscribe((/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        _ => {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupExpirationTimers() {\r\n        /** @type {?} */\r\n        const idTokenExp = this.getIdTokenExpiration() || Number.MAX_VALUE;\r\n        /** @type {?} */\r\n        const accessTokenExp = this.getAccessTokenExpiration() || Number.MAX_VALUE;\r\n        /** @type {?} */\r\n        const useAccessTokenExp = accessTokenExp <= idTokenExp;\r\n        if (this.hasValidAccessToken() && useAccessTokenExp) {\r\n            this.setupAccessTokenTimer();\r\n        }\r\n        if (this.hasValidIdToken() && !useAccessTokenExp) {\r\n            this.setupIdTokenTimer();\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupAccessTokenTimer() {\r\n        /** @type {?} */\r\n        const expiration = this.getAccessTokenExpiration();\r\n        /** @type {?} */\r\n        const storedAt = this.getAccessTokenStoredAt();\r\n        /** @type {?} */\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n        this.ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.accessTokenTimeoutSubscription = of(new OAuthInfoEvent('token_expires', 'access_token'))\r\n                .pipe(delay(timeout))\r\n                .subscribe((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => {\r\n                this.ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this.eventsSubject.next(e);\r\n                }));\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupIdTokenTimer() {\r\n        /** @type {?} */\r\n        const expiration = this.getIdTokenExpiration();\r\n        /** @type {?} */\r\n        const storedAt = this.getIdTokenStoredAt();\r\n        /** @type {?} */\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n        this.ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.idTokenTimeoutSubscription = of(new OAuthInfoEvent('token_expires', 'id_token'))\r\n                .pipe(delay(timeout))\r\n                .subscribe((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => {\r\n                this.ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this.eventsSubject.next(e);\r\n                }));\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    clearAccessTokenTimer() {\r\n        if (this.accessTokenTimeoutSubscription) {\r\n            this.accessTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    clearIdTokenTimer() {\r\n        if (this.idTokenTimeoutSubscription) {\r\n            this.idTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} storedAt\r\n     * @param {?} expiration\r\n     * @return {?}\r\n     */\r\n    calcTimeout(storedAt, expiration) {\r\n        /** @type {?} */\r\n        const now = Date.now();\r\n        /** @type {?} */\r\n        const delta = (expiration - storedAt) * this.timeoutFactor - (now - storedAt);\r\n        return Math.max(0, delta);\r\n    }\r\n    /**\r\n     * DEPRECATED. Use a provider for OAuthStorage instead:\r\n     *\r\n     * { provide: OAuthStorage, useFactory: oAuthStorageFactory }\r\n     * export function oAuthStorageFactory(): OAuthStorage { return localStorage; }\r\n     * Sets a custom storage used to store the received\r\n     * tokens on client side. By default, the browser's\r\n     * sessionStorage is used.\r\n     * @ignore\r\n     *\r\n     * @param {?} storage\r\n     * @return {?}\r\n     */\r\n    setStorage(storage) {\r\n        this._storage = storage;\r\n        this.configChanged();\r\n    }\r\n    /**\r\n     * Loads the discovery document to configure most\r\n     * properties of this service. The url of the discovery\r\n     * document is infered from the issuer's url according\r\n     * to the OpenId Connect spec. To use another url you\r\n     * can pass it to to optional parameter fullUrl.\r\n     *\r\n     * @param {?=} fullUrl\r\n     * @return {?}\r\n     */\r\n    loadDiscoveryDocument(fullUrl = null) {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            if (!fullUrl) {\r\n                fullUrl = this.issuer || '';\r\n                if (!fullUrl.endsWith('/')) {\r\n                    fullUrl += '/';\r\n                }\r\n                fullUrl += '.well-known/openid-configuration';\r\n            }\r\n            if (!this.validateUrlForHttps(fullUrl)) {\r\n                reject('issuer must use https, or config value for property requireHttps must allow http');\r\n                return;\r\n            }\r\n            this.http.get(fullUrl).subscribe((/**\r\n             * @param {?} doc\r\n             * @return {?}\r\n             */\r\n            doc => {\r\n                if (!this.validateDiscoveryDocument(doc)) {\r\n                    this.eventsSubject.next(new OAuthErrorEvent('discovery_document_validation_error', null));\r\n                    reject('discovery_document_validation_error');\r\n                    return;\r\n                }\r\n                this.loginUrl = doc.authorization_endpoint;\r\n                this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\r\n                this.grantTypesSupported = doc.grant_types_supported;\r\n                this.issuer = doc.issuer;\r\n                this.tokenEndpoint = doc.token_endpoint;\r\n                this.userinfoEndpoint = doc.userinfo_endpoint;\r\n                this.jwksUri = doc.jwks_uri;\r\n                this.sessionCheckIFrameUrl = doc.check_session_iframe || this.sessionCheckIFrameUrl;\r\n                this.discoveryDocumentLoaded = true;\r\n                this.discoveryDocumentLoadedSubject.next(doc);\r\n                if (this.sessionChecksEnabled) {\r\n                    this.restartSessionChecksIfStillLoggedIn();\r\n                }\r\n                this.loadJwks()\r\n                    .then((/**\r\n                 * @param {?} jwks\r\n                 * @return {?}\r\n                 */\r\n                jwks => {\r\n                    /** @type {?} */\r\n                    const result = {\r\n                        discoveryDocument: doc,\r\n                        jwks: jwks\r\n                    };\r\n                    /** @type {?} */\r\n                    const event = new OAuthSuccessEvent('discovery_document_loaded', result);\r\n                    this.eventsSubject.next(event);\r\n                    resolve(event);\r\n                    return;\r\n                }))\r\n                    .catch((/**\r\n                 * @param {?} err\r\n                 * @return {?}\r\n                 */\r\n                err => {\r\n                    this.eventsSubject.next(new OAuthErrorEvent('discovery_document_load_error', err));\r\n                    reject(err);\r\n                    return;\r\n                }));\r\n            }), (/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => {\r\n                this.logger.error('error loading discovery document', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('discovery_document_load_error', err));\r\n                reject(err);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    loadJwks() {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            if (this.jwksUri) {\r\n                this.http.get(this.jwksUri).subscribe((/**\r\n                 * @param {?} jwks\r\n                 * @return {?}\r\n                 */\r\n                jwks => {\r\n                    this.jwks = jwks;\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('discovery_document_loaded'));\r\n                    resolve(jwks);\r\n                }), (/**\r\n                 * @param {?} err\r\n                 * @return {?}\r\n                 */\r\n                err => {\r\n                    this.logger.error('error loading jwks', err);\r\n                    this.eventsSubject.next(new OAuthErrorEvent('jwks_load_error', err));\r\n                    reject(err);\r\n                }));\r\n            }\r\n            else {\r\n                resolve(null);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    validateDiscoveryDocument(doc) {\r\n        /** @type {?} */\r\n        let errors;\r\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\r\n            this.logger.error('invalid issuer in discovery document', 'expected: ' + this.issuer, 'current: ' + doc.issuer);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating authorization_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating end_session_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating token_endpoint in discovery document', errors);\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating userinfo_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating jwks_uri in discovery document', errors);\r\n            return false;\r\n        }\r\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\r\n            this.logger.warn('sessionChecksEnabled is activated but discovery document' +\r\n                ' does not contain a check_session_iframe field');\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Uses password flow to exchange userName and password for an\r\n     * access_token. After receiving the access_token, this method\r\n     * uses it to query the userinfo endpoint in order to get information\r\n     * about the user in question.\r\n     *\r\n     * When using this, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation\r\n     * fail.\r\n     *\r\n     * @param {?} userName\r\n     * @param {?} password\r\n     * @param {?=} headers Optional additional http-headers.\r\n     * @return {?}\r\n     */\r\n    fetchTokenUsingPasswordFlowAndLoadUserProfile(userName, password, headers = new HttpHeaders()) {\r\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then((/**\r\n         * @return {?}\r\n         */\r\n        () => this.loadUserProfile()));\r\n    }\r\n    /**\r\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\r\n     *\r\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation fail.\r\n     * @return {?}\r\n     */\r\n    loadUserProfile() {\r\n        if (!this.hasValidAccessToken()) {\r\n            throw new Error('Can not load User Profile without access_token');\r\n        }\r\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\r\n            throw new Error('userinfoEndpoint must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /** @type {?} */\r\n            const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getAccessToken());\r\n            this.http.get(this.userinfoEndpoint, { headers }).subscribe((/**\r\n             * @param {?} info\r\n             * @return {?}\r\n             */\r\n            info => {\r\n                this.debug('userinfo received', info);\r\n                /** @type {?} */\r\n                const existingClaims = this.getIdentityClaims() || {};\r\n                if (!this.skipSubjectCheck) {\r\n                    if (this.oidc &&\r\n                        (!existingClaims['sub'] || info.sub !== existingClaims['sub'])) {\r\n                        /** @type {?} */\r\n                        const err = 'if property oidc is true, the received user-id (sub) has to be the user-id ' +\r\n                            'of the user that has logged in with oidc.\\n' +\r\n                            'if you are not using oidc but just oauth2 password flow set oidc to false';\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n                }\r\n                info = Object.assign({}, existingClaims, info);\r\n                this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\r\n                this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\r\n                resolve(info);\r\n            }), (/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => {\r\n                this.logger.error('error loading user info', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('user_profile_load_error', err));\r\n                reject(err);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * Uses password flow to exchange userName and password for an access_token.\r\n     * @param {?} userName\r\n     * @param {?} password\r\n     * @param {?=} headers Optional additional http-headers.\r\n     * @return {?}\r\n     */\r\n    fetchTokenUsingPasswordFlow(userName, password, headers = new HttpHeaders()) {\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error('tokenEndpoint must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /**\r\n             * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n             * serialize and parse URL parameter keys and values.\r\n             *\r\n             * \\@stable\r\n             * @type {?}\r\n             */\r\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n                .set('grant_type', 'password')\r\n                .set('scope', this.scope)\r\n                .set('username', userName)\r\n                .set('password', password);\r\n            if (this.useHttpBasicAuth) {\r\n                /** @type {?} */\r\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n                headers = headers.set('Authorization', 'Basic ' + header);\r\n            }\r\n            if (!this.useHttpBasicAuth) {\r\n                params = params.set('client_id', this.clientId);\r\n            }\r\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n            headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n            this.http\r\n                .post(this.tokenEndpoint, params, { headers })\r\n                .subscribe((/**\r\n             * @param {?} tokenResponse\r\n             * @return {?}\r\n             */\r\n            tokenResponse => {\r\n                this.debug('tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in, tokenResponse.scope);\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                resolve(tokenResponse);\r\n            }), (/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => {\r\n                this.logger.error('Error performing password flow', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\r\n                reject(err);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * Refreshes the token using a refresh_token.\r\n     * This does not work for implicit flow, b/c\r\n     * there is no refresh_token in this flow.\r\n     * A solution for this is provided by the\r\n     * method silentRefresh.\r\n     * @return {?}\r\n     */\r\n    refreshToken() {\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error('tokenEndpoint must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /** @type {?} */\r\n            let params = new HttpParams()\r\n                .set('grant_type', 'refresh_token')\r\n                .set('client_id', this.clientId)\r\n                .set('scope', this.scope)\r\n                .set('refresh_token', this._storage.getItem('refresh_token'));\r\n            if (this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n            this.http\r\n                .post(this.tokenEndpoint, params, { headers })\r\n                .pipe(switchMap((/**\r\n             * @param {?} tokenResponse\r\n             * @return {?}\r\n             */\r\n            tokenResponse => {\r\n                if (tokenResponse.id_token) {\r\n                    return from(this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, true))\r\n                        .pipe(tap((/**\r\n                     * @param {?} result\r\n                     * @return {?}\r\n                     */\r\n                    result => this.storeIdToken(result))), map((/**\r\n                     * @param {?} _\r\n                     * @return {?}\r\n                     */\r\n                    _ => tokenResponse)));\r\n                }\r\n                else {\r\n                    return of(tokenResponse);\r\n                }\r\n            })))\r\n                .subscribe((/**\r\n             * @param {?} tokenResponse\r\n             * @return {?}\r\n             */\r\n            tokenResponse => {\r\n                this.debug('refresh tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in, tokenResponse.scope);\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                resolve(tokenResponse);\r\n            }), (/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => {\r\n                this.logger.error('Error performing password flow', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                reject(err);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    removeSilentRefreshEventListener() {\r\n        if (this.silentRefreshPostMessageEventListener) {\r\n            window.removeEventListener('message', this.silentRefreshPostMessageEventListener);\r\n            this.silentRefreshPostMessageEventListener = null;\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupSilentRefreshEventListener() {\r\n        this.removeSilentRefreshEventListener();\r\n        this.silentRefreshPostMessageEventListener = (/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        (e) => {\r\n            /** @type {?} */\r\n            const message = this.processMessageEventMessage(e);\r\n            this.tryLogin({\r\n                customHashFragment: message,\r\n                preventClearHashAfterLogin: true,\r\n                onLoginError: (/**\r\n                 * @param {?} err\r\n                 * @return {?}\r\n                 */\r\n                err => {\r\n                    this.eventsSubject.next(new OAuthErrorEvent('silent_refresh_error', err));\r\n                }),\r\n                onTokenReceived: (/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('silently_refreshed'));\r\n                })\r\n            }).catch((/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => this.debug('tryLogin during silent refresh failed', err)));\r\n        });\r\n        window.addEventListener('message', this.silentRefreshPostMessageEventListener);\r\n    }\r\n    /**\r\n     * Performs a silent refresh for implicit flow.\r\n     * Use this method to get new tokens when/before\r\n     * the existing tokens expire.\r\n     * @param {?=} params\r\n     * @param {?=} noPrompt\r\n     * @return {?}\r\n     */\r\n    silentRefresh(params = {}, noPrompt = true) {\r\n        /** @type {?} */\r\n        const claims = this.getIdentityClaims() || {};\r\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\r\n            params['id_token_hint'] = this.getIdToken();\r\n        }\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('tokenEndpoint must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        if (typeof document === 'undefined') {\r\n            throw new Error('silent refresh is not supported on this platform');\r\n        }\r\n        /** @type {?} */\r\n        const existingIframe = document.getElementById(this.silentRefreshIFrameName);\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n        this.silentRefreshSubject = claims['sub'];\r\n        /** @type {?} */\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.silentRefreshIFrameName;\r\n        this.setupSilentRefreshEventListener();\r\n        /** @type {?} */\r\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\r\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then((/**\r\n         * @param {?} url\r\n         * @return {?}\r\n         */\r\n        url => {\r\n            iframe.setAttribute('src', url);\r\n            if (!this.silentRefreshShowIFrame) {\r\n                iframe.style['display'] = 'none';\r\n            }\r\n            document.body.appendChild(iframe);\r\n        }));\r\n        /** @type {?} */\r\n        const errors = this.events.pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e instanceof OAuthErrorEvent)), first());\r\n        /** @type {?} */\r\n        const success = this.events.pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.type === 'silently_refreshed')), first());\r\n        /** @type {?} */\r\n        const timeout = of(new OAuthErrorEvent('silent_refresh_timeout', null)).pipe(delay(this.silentRefreshTimeout));\r\n        return race([errors, success, timeout])\r\n            .pipe(tap((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => {\r\n            if (e.type === 'silent_refresh_timeout') {\r\n                this.eventsSubject.next(e);\r\n            }\r\n        })), map((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => {\r\n            if (e instanceof OAuthErrorEvent) {\r\n                throw e;\r\n            }\r\n            return e;\r\n        })))\r\n            .toPromise();\r\n    }\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    initImplicitFlowInPopup(options) {\r\n        options = options || {};\r\n        return this.createLoginUrl(null, null, this.silentRefreshRedirectUri, false, {\r\n            display: 'popup'\r\n        }).then((/**\r\n         * @param {?} url\r\n         * @return {?}\r\n         */\r\n        url => {\r\n            return new Promise((/**\r\n             * @param {?} resolve\r\n             * @param {?} reject\r\n             * @return {?}\r\n             */\r\n            (resolve, reject) => {\r\n                /** @type {?} */\r\n                let windowRef = window.open(url, '_blank', this.calculatePopupFeatures(options));\r\n                /** @type {?} */\r\n                const cleanup = (/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    window.removeEventListener('message', listener);\r\n                    windowRef.close();\r\n                    windowRef = null;\r\n                });\r\n                /** @type {?} */\r\n                const listener = (/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                (e) => {\r\n                    /** @type {?} */\r\n                    const message = this.processMessageEventMessage(e);\r\n                    this.tryLogin({\r\n                        customHashFragment: message,\r\n                        preventClearHashAfterLogin: true,\r\n                    }).then((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        cleanup();\r\n                        resolve();\r\n                    }), (/**\r\n                     * @param {?} err\r\n                     * @return {?}\r\n                     */\r\n                    err => {\r\n                        cleanup();\r\n                        reject(err);\r\n                    }));\r\n                });\r\n                window.addEventListener('message', listener);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    calculatePopupFeatures(options) {\r\n        // Specify an static height and width and calculate centered position\r\n        /** @type {?} */\r\n        const height = options.height || 470;\r\n        /** @type {?} */\r\n        const width = options.width || 500;\r\n        /** @type {?} */\r\n        const left = (screen.width / 2) - (width / 2);\r\n        /** @type {?} */\r\n        const top = (screen.height / 2) - (height / 2);\r\n        return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    processMessageEventMessage(e) {\r\n        /** @type {?} */\r\n        let expectedPrefix = '#';\r\n        if (this.silentRefreshMessagePrefix) {\r\n            expectedPrefix += this.silentRefreshMessagePrefix;\r\n        }\r\n        if (!e || !e.data || typeof e.data !== 'string') {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const prefixedMessage = e.data;\r\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\r\n            return;\r\n        }\r\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    canPerformSessionCheck() {\r\n        if (!this.sessionChecksEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.sessionCheckIFrameUrl) {\r\n            console.warn('sessionChecksEnabled is activated but there is no sessionCheckIFrameUrl');\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            console.warn('sessionChecksEnabled is activated but there is no session_state');\r\n            return false;\r\n        }\r\n        if (typeof document === 'undefined') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    setupSessionCheckEventListener() {\r\n        this.removeSessionCheckEventListener();\r\n        this.sessionCheckEventListener = (/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        (e) => {\r\n            /** @type {?} */\r\n            const origin = e.origin.toLowerCase();\r\n            /** @type {?} */\r\n            const issuer = this.issuer.toLowerCase();\r\n            this.debug('sessionCheckEventListener');\r\n            if (!issuer.startsWith(origin)) {\r\n                this.debug('sessionCheckEventListener', 'wrong origin', origin, 'expected', issuer);\r\n            }\r\n            // only run in Angular zone if it is 'changed' or 'error'\r\n            switch (e.data) {\r\n                case 'unchanged':\r\n                    this.handleSessionUnchanged();\r\n                    break;\r\n                case 'changed':\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        this.handleSessionChange();\r\n                    }));\r\n                    break;\r\n                case 'error':\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        this.handleSessionError();\r\n                    }));\r\n                    break;\r\n            }\r\n            this.debug('got info from session check inframe', e);\r\n        });\r\n        // prevent Angular from refreshing the view on every message (runs in intervals)\r\n        this.ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            window.addEventListener('message', this.sessionCheckEventListener);\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleSessionUnchanged() {\r\n        this.debug('session check', 'session unchanged');\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleSessionChange() {\r\n        /* events: session_changed, relogin, stopTimer, logged_out*/\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\r\n        this.stopSessionCheckTimer();\r\n        if (this.silentRefreshRedirectUri) {\r\n            this.silentRefresh().catch((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => this.debug('silent refresh failed after session changed')));\r\n            this.waitForSilentRefreshAfterSessionChange();\r\n        }\r\n        else {\r\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n            this.logOut(true);\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    waitForSilentRefreshAfterSessionChange() {\r\n        this.events\r\n            .pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        (e) => e.type === 'silently_refreshed' ||\r\n            e.type === 'silent_refresh_timeout' ||\r\n            e.type === 'silent_refresh_error')), first())\r\n            .subscribe((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => {\r\n            if (e.type !== 'silently_refreshed') {\r\n                this.debug('silent refresh did not work after session changed');\r\n                this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n                this.logOut(true);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleSessionError() {\r\n        this.stopSessionCheckTimer();\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    removeSessionCheckEventListener() {\r\n        if (this.sessionCheckEventListener) {\r\n            window.removeEventListener('message', this.sessionCheckEventListener);\r\n            this.sessionCheckEventListener = null;\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    initSessionCheck() {\r\n        if (!this.canPerformSessionCheck()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const existingIframe = document.getElementById(this.sessionCheckIFrameName);\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n        /** @type {?} */\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.sessionCheckIFrameName;\r\n        this.setupSessionCheckEventListener();\r\n        /** @type {?} */\r\n        const url = this.sessionCheckIFrameUrl;\r\n        iframe.setAttribute('src', url);\r\n        iframe.style.display = 'none';\r\n        document.body.appendChild(iframe);\r\n        this.startSessionCheckTimer();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    startSessionCheckTimer() {\r\n        this.stopSessionCheckTimer();\r\n        this.ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.sessionCheckTimer = setInterval(this.checkSession.bind(this), this.sessionCheckIntervall);\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    stopSessionCheckTimer() {\r\n        if (this.sessionCheckTimer) {\r\n            clearInterval(this.sessionCheckTimer);\r\n            this.sessionCheckTimer = null;\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    checkSession() {\r\n        /** @type {?} */\r\n        const iframe = document.getElementById(this.sessionCheckIFrameName);\r\n        if (!iframe) {\r\n            this.logger.warn('checkSession did not find iframe', this.sessionCheckIFrameName);\r\n        }\r\n        /** @type {?} */\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            this.stopSessionCheckTimer();\r\n        }\r\n        /** @type {?} */\r\n        const message = this.clientId + ' ' + sessionState;\r\n        iframe.contentWindow.postMessage(message, this.issuer);\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?=} state\r\n     * @param {?=} loginHint\r\n     * @param {?=} customRedirectUri\r\n     * @param {?=} noPrompt\r\n     * @param {?=} params\r\n     * @return {?}\r\n     */\r\n    createLoginUrl(state = '', loginHint = '', customRedirectUri = '', noPrompt = false, params = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /** @type {?} */\r\n            const that = this;\r\n            /** @type {?} */\r\n            let redirectUri;\r\n            if (customRedirectUri) {\r\n                redirectUri = customRedirectUri;\r\n            }\r\n            else {\r\n                redirectUri = this.redirectUri;\r\n            }\r\n            /** @type {?} */\r\n            const nonce = yield this.createAndSaveNonce();\r\n            if (state) {\r\n                state = nonce + this.config.nonceStateSeparator + state;\r\n            }\r\n            else {\r\n                state = nonce;\r\n            }\r\n            if (!this.requestAccessToken && !this.oidc) {\r\n                throw new Error('Either requestAccessToken or oidc or both must be true');\r\n            }\r\n            if (this.config.responseType) {\r\n                this.responseType = this.config.responseType;\r\n            }\r\n            else {\r\n                if (this.oidc && this.requestAccessToken) {\r\n                    this.responseType = 'id_token token';\r\n                }\r\n                else if (this.oidc && !this.requestAccessToken) {\r\n                    this.responseType = 'id_token';\r\n                }\r\n                else {\r\n                    this.responseType = 'token';\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\r\n            /** @type {?} */\r\n            let scope = that.scope;\r\n            if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\r\n                scope = 'openid ' + scope;\r\n            }\r\n            /** @type {?} */\r\n            let url = that.loginUrl +\r\n                seperationChar +\r\n                'response_type=' +\r\n                encodeURIComponent(that.responseType) +\r\n                '&client_id=' +\r\n                encodeURIComponent(that.clientId) +\r\n                '&state=' +\r\n                encodeURIComponent(state) +\r\n                '&redirect_uri=' +\r\n                encodeURIComponent(redirectUri) +\r\n                '&scope=' +\r\n                encodeURIComponent(scope);\r\n            if (this.responseType === 'code' && !this.disablePKCE) {\r\n                const [challenge, verifier] = yield this.createChallangeVerifierPairForPKCE();\r\n                this._storage.setItem('PKCI_verifier', verifier);\r\n                url += '&code_challenge=' + challenge;\r\n                url += '&code_challenge_method=S256';\r\n            }\r\n            if (loginHint) {\r\n                url += '&login_hint=' + encodeURIComponent(loginHint);\r\n            }\r\n            if (that.resource) {\r\n                url += '&resource=' + encodeURIComponent(that.resource);\r\n            }\r\n            if (that.oidc) {\r\n                url += '&nonce=' + encodeURIComponent(nonce);\r\n            }\r\n            if (noPrompt) {\r\n                url += '&prompt=none';\r\n            }\r\n            for (const key of Object.keys(params)) {\r\n                url +=\r\n                    '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n            }\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    url +=\r\n                        '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\r\n                }\r\n            }\r\n            return url;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?=} additionalState\r\n     * @param {?=} params\r\n     * @return {?}\r\n     */\r\n    initImplicitFlowInternal(additionalState = '', params = '') {\r\n        if (this.inImplicitFlow) {\r\n            return;\r\n        }\r\n        this.inImplicitFlow = true;\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('loginUrl must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        /** @type {?} */\r\n        let addParams = {};\r\n        /** @type {?} */\r\n        let loginHint = null;\r\n        if (typeof params === 'string') {\r\n            loginHint = params;\r\n        }\r\n        else if (typeof params === 'object') {\r\n            addParams = params;\r\n        }\r\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\r\n            .then(this.config.openUri)\r\n            .catch((/**\r\n         * @param {?} error\r\n         * @return {?}\r\n         */\r\n        error => {\r\n            console.error('Error in initImplicitFlow', error);\r\n            this.inImplicitFlow = false;\r\n        }));\r\n    }\r\n    /**\r\n     * Starts the implicit flow and redirects to user to\r\n     * the auth servers' login url.\r\n     *\r\n     * @param {?=} additionalState Optional state that is passed around.\r\n     *  You'll find this state in the property `state` after `tryLogin` logged in the user.\r\n     * @param {?=} params Hash with additional parameter. If it is a string, it is used for the\r\n     *               parameter loginHint (for the sake of compatibility with former versions)\r\n     * @return {?}\r\n     */\r\n    initImplicitFlow(additionalState = '', params = '') {\r\n        if (this.loginUrl !== '') {\r\n            this.initImplicitFlowInternal(additionalState, params);\r\n        }\r\n        else {\r\n            this.events\r\n                .pipe(filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.type === 'discovery_document_loaded')))\r\n                .subscribe((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => this.initImplicitFlowInternal(additionalState, params)));\r\n        }\r\n    }\r\n    /**\r\n     * Reset current implicit flow\r\n     *\r\n     * \\@description This method allows resetting the current implict flow in order to be initialized again.\r\n     * @return {?}\r\n     */\r\n    resetImplicitFlow() {\r\n        this.inImplicitFlow = false;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    callOnTokenReceivedIfExists(options) {\r\n        /** @type {?} */\r\n        const that = this;\r\n        if (options.onTokenReceived) {\r\n            /** @type {?} */\r\n            const tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} accessToken\r\n     * @param {?} refreshToken\r\n     * @param {?} expiresIn\r\n     * @param {?} grantedScopes\r\n     * @return {?}\r\n     */\r\n    storeAccessTokenResponse(accessToken, refreshToken, expiresIn, grantedScopes) {\r\n        this._storage.setItem('access_token', accessToken);\r\n        if (grantedScopes) {\r\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split('+')));\r\n        }\r\n        this._storage.setItem('access_token_stored_at', '' + Date.now());\r\n        if (expiresIn) {\r\n            /** @type {?} */\r\n            const expiresInMilliSeconds = expiresIn * 1000;\r\n            /** @type {?} */\r\n            const now = new Date();\r\n            /** @type {?} */\r\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\r\n            this._storage.setItem('expires_at', '' + expiresAt);\r\n        }\r\n        if (refreshToken) {\r\n            this._storage.setItem('refresh_token', refreshToken);\r\n        }\r\n    }\r\n    /**\r\n     * Delegates to tryLoginImplicitFlow for the sake of competability\r\n     * @param {?=} options Optional options.\r\n     * @return {?}\r\n     */\r\n    tryLogin(options = null) {\r\n        if (this.config.responseType === 'code') {\r\n            return this.tryLoginCodeFlow().then((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => true));\r\n        }\r\n        else {\r\n            return this.tryLoginImplicitFlow(options);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} queryString\r\n     * @return {?}\r\n     */\r\n    parseQueryString(queryString) {\r\n        if (!queryString || queryString.length === 0) {\r\n            return {};\r\n        }\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n        return this.urlHelper.parseQueryString(queryString);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    tryLoginCodeFlow() {\r\n        /** @type {?} */\r\n        const parts = this.parseQueryString(window.location.search);\r\n        /** @type {?} */\r\n        const code = parts['code'];\r\n        /** @type {?} */\r\n        const state = parts['state'];\r\n        /** @type {?} */\r\n        const href = location.href\r\n            .replace(/[&\\?]code=[^&\\$]*/, '')\r\n            .replace(/[&\\?]scope=[^&\\$]*/, '')\r\n            .replace(/[&\\?]state=[^&\\$]*/, '')\r\n            .replace(/[&\\?]session_state=[^&\\$]*/, '');\r\n        history.replaceState(null, window.name, href);\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError({}, parts);\r\n            /** @type {?} */\r\n            const err = new OAuthErrorEvent('code_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!nonceInState) {\r\n            return Promise.resolve();\r\n        }\r\n        /** @type {?} */\r\n        const success = this.validateNonce(nonceInState);\r\n        if (!success) {\r\n            /** @type {?} */\r\n            const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n            this.eventsSubject.next(event);\r\n            return Promise.reject(event);\r\n        }\r\n        if (code) {\r\n            return new Promise((/**\r\n             * @param {?} resolve\r\n             * @param {?} reject\r\n             * @return {?}\r\n             */\r\n            (resolve, reject) => {\r\n                this.getTokenFromCode(code).then((/**\r\n                 * @param {?} result\r\n                 * @return {?}\r\n                 */\r\n                result => {\r\n                    resolve();\r\n                })).catch((/**\r\n                 * @param {?} err\r\n                 * @return {?}\r\n                 */\r\n                err => {\r\n                    reject(err);\r\n                }));\r\n            }));\r\n        }\r\n        else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n    /**\r\n     * Get token using an intermediate code. Works for the Authorization Code flow.\r\n     * @private\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\r\n    getTokenFromCode(code) {\r\n        /** @type {?} */\r\n        let params = new HttpParams()\r\n            .set('grant_type', 'authorization_code')\r\n            .set('code', code)\r\n            .set('redirect_uri', this.redirectUri);\r\n        if (!this.disablePKCE) {\r\n            /** @type {?} */\r\n            const pkciVerifier = this._storage.getItem('PKCI_verifier');\r\n            if (!pkciVerifier) {\r\n                console.warn('No PKCI verifier found in oauth storage!');\r\n            }\r\n            else {\r\n                params = params.set('code_verifier', pkciVerifier);\r\n            }\r\n        }\r\n        return this.fetchAndProcessToken(params);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    fetchAndProcessToken(params) {\r\n        /** @type {?} */\r\n        let headers = new HttpHeaders()\r\n            .set('Content-Type', 'application/x-www-form-urlencoded');\r\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\r\n            throw new Error('tokenEndpoint must use Http. Also check property requireHttps.');\r\n        }\r\n        if (this.useHttpBasicAuth) {\r\n            /** @type {?} */\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set('Authorization', 'Basic ' + header);\r\n        }\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            if (this.customQueryParams) {\r\n                for (let key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n            this.http.post(this.tokenEndpoint, params, { headers }).subscribe((/**\r\n             * @param {?} tokenResponse\r\n             * @return {?}\r\n             */\r\n            (tokenResponse) => {\r\n                this.debug('refresh tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in, tokenResponse.scope);\r\n                if (this.oidc && tokenResponse.id_token) {\r\n                    this.processIdToken(tokenResponse.id_token, tokenResponse.access_token).\r\n                        then((/**\r\n                     * @param {?} result\r\n                     * @return {?}\r\n                     */\r\n                    result => {\r\n                        this.storeIdToken(result);\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                        resolve(tokenResponse);\r\n                    }))\r\n                        .catch((/**\r\n                     * @param {?} reason\r\n                     * @return {?}\r\n                     */\r\n                    reason => {\r\n                        this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n                        console.error('Error validating tokens');\r\n                        console.error(reason);\r\n                        reject(reason);\r\n                    }));\r\n                }\r\n                else {\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                    resolve(tokenResponse);\r\n                }\r\n            }), (/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            (err) => {\r\n                console.error('Error getting token', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                reject(err);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * Checks whether there are tokens in the hash fragment\r\n     * as a result of the implicit flow. These tokens are\r\n     * parsed, validated and used to sign the user in to the\r\n     * current client.\r\n     *\r\n     * @param {?=} options Optional options.\r\n     * @return {?}\r\n     */\r\n    tryLoginImplicitFlow(options = null) {\r\n        options = options || {};\r\n        /** @type {?} */\r\n        let parts;\r\n        if (options.customHashFragment) {\r\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\r\n        }\r\n        else {\r\n            parts = this.urlHelper.getHashFragmentParams();\r\n        }\r\n        this.debug('parsed url', parts);\r\n        /** @type {?} */\r\n        const state = parts['state'];\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError(options, parts);\r\n            /** @type {?} */\r\n            const err = new OAuthErrorEvent('token_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n        /** @type {?} */\r\n        const accessToken = parts['access_token'];\r\n        /** @type {?} */\r\n        const idToken = parts['id_token'];\r\n        /** @type {?} */\r\n        const sessionState = parts['session_state'];\r\n        /** @type {?} */\r\n        const grantedScopes = parts['scope'];\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            return Promise.reject('Either requestAccessToken or oidc (or both) must be true.');\r\n        }\r\n        if (this.requestAccessToken && !accessToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.oidc && !idToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.sessionChecksEnabled && !sessionState) {\r\n            this.logger.warn('session checks (Session Status Change Notification) ' +\r\n                'were activated in the configuration but the id_token ' +\r\n                'does not contain a session_state claim');\r\n        }\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck) {\r\n            /** @type {?} */\r\n            const success = this.validateNonce(nonceInState);\r\n            if (!success) {\r\n                /** @type {?} */\r\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n                this.eventsSubject.next(event);\r\n                return Promise.reject(event);\r\n            }\r\n        }\r\n        if (this.requestAccessToken) {\r\n            this.storeAccessTokenResponse(accessToken, null, parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec, grantedScopes);\r\n        }\r\n        if (!this.oidc) {\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                location.hash = '';\r\n            }\r\n            this.callOnTokenReceivedIfExists(options);\r\n            return Promise.resolve(true);\r\n        }\r\n        return this.processIdToken(idToken, accessToken)\r\n            .then((/**\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        result => {\r\n            if (options.validationHandler) {\r\n                return options\r\n                    .validationHandler({\r\n                    accessToken: accessToken,\r\n                    idClaims: result.idTokenClaims,\r\n                    idToken: result.idToken,\r\n                    state: state\r\n                })\r\n                    .then((/**\r\n                 * @param {?} _\r\n                 * @return {?}\r\n                 */\r\n                _ => result));\r\n            }\r\n            return result;\r\n        }))\r\n            .then((/**\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        result => {\r\n            this.storeIdToken(result);\r\n            this.storeSessionState(sessionState);\r\n            if (this.clearHashAfterLogin) {\r\n                location.hash = '';\r\n            }\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            this.callOnTokenReceivedIfExists(options);\r\n            this.inImplicitFlow = false;\r\n            return true;\r\n        }))\r\n            .catch((/**\r\n         * @param {?} reason\r\n         * @return {?}\r\n         */\r\n        reason => {\r\n            this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n            this.logger.error('Error validating tokens');\r\n            this.logger.error(reason);\r\n            return Promise.reject(reason);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    parseState(state) {\r\n        /** @type {?} */\r\n        let nonce = state;\r\n        /** @type {?} */\r\n        let userState = '';\r\n        if (state) {\r\n            /** @type {?} */\r\n            const idx = state.indexOf(this.config.nonceStateSeparator);\r\n            if (idx > -1) {\r\n                nonce = state.substr(0, idx);\r\n                userState = state.substr(idx + this.config.nonceStateSeparator.length);\r\n            }\r\n        }\r\n        return [nonce, userState];\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} nonceInState\r\n     * @return {?}\r\n     */\r\n    validateNonce(nonceInState) {\r\n        /** @type {?} */\r\n        const savedNonce = this._storage.getItem('nonce');\r\n        if (savedNonce !== nonceInState) {\r\n            /** @type {?} */\r\n            const err = 'Validating access_token failed, wrong state/nonce.';\r\n            console.error(err, savedNonce, nonceInState);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} idToken\r\n     * @return {?}\r\n     */\r\n    storeIdToken(idToken) {\r\n        this._storage.setItem('id_token', idToken.idToken);\r\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\r\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\r\n        this._storage.setItem('id_token_stored_at', '' + Date.now());\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} sessionState\r\n     * @return {?}\r\n     */\r\n    storeSessionState(sessionState) {\r\n        this._storage.setItem('session_state', sessionState);\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getSessionState() {\r\n        return this._storage.getItem('session_state');\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} options\r\n     * @param {?} parts\r\n     * @return {?}\r\n     */\r\n    handleLoginError(options, parts) {\r\n        if (options.onLoginError) {\r\n            options.onLoginError(parts);\r\n        }\r\n        if (this.clearHashAfterLogin) {\r\n            location.hash = '';\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param {?} idToken\r\n     * @param {?} accessToken\r\n     * @param {?=} skipNonceCheck\r\n     * @return {?}\r\n     */\r\n    processIdToken(idToken, accessToken, skipNonceCheck = false) {\r\n        /** @type {?} */\r\n        const tokenParts = idToken.split('.');\r\n        /** @type {?} */\r\n        const headerBase64 = this.padBase64(tokenParts[0]);\r\n        /** @type {?} */\r\n        const headerJson = b64DecodeUnicode(headerBase64);\r\n        /** @type {?} */\r\n        const header = JSON.parse(headerJson);\r\n        /** @type {?} */\r\n        const claimsBase64 = this.padBase64(tokenParts[1]);\r\n        /** @type {?} */\r\n        const claimsJson = b64DecodeUnicode(claimsBase64);\r\n        /** @type {?} */\r\n        const claims = JSON.parse(claimsJson);\r\n        /** @type {?} */\r\n        const savedNonce = this._storage.getItem('nonce');\r\n        if (Array.isArray(claims.aud)) {\r\n            if (claims.aud.every((/**\r\n             * @param {?} v\r\n             * @return {?}\r\n             */\r\n            v => v !== this.clientId))) {\r\n                /** @type {?} */\r\n                const err = 'Wrong audience: ' + claims.aud.join(',');\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        else {\r\n            if (claims.aud !== this.clientId) {\r\n                /** @type {?} */\r\n                const err = 'Wrong audience: ' + claims.aud;\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        if (!claims.sub) {\r\n            /** @type {?} */\r\n            const err = 'No sub claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        /* For now, we only check whether the sub against\r\n         * silentRefreshSubject when sessionChecksEnabled is on\r\n         * We will reconsider in a later version to do this\r\n         * in every other case too.\r\n         */\r\n        if (this.sessionChecksEnabled &&\r\n            this.silentRefreshSubject &&\r\n            this.silentRefreshSubject !== claims['sub']) {\r\n            /** @type {?} */\r\n            const err = 'After refreshing, we got an id_token for another user (sub). ' +\r\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${claims['sub']}`;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!claims.iat) {\r\n            /** @type {?} */\r\n            const err = 'No iat claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!this.skipIssuerCheck && claims.iss !== this.issuer) {\r\n            /** @type {?} */\r\n            const err = 'Wrong issuer: ' + claims.iss;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!skipNonceCheck && claims.nonce !== savedNonce) {\r\n            /** @type {?} */\r\n            const err = 'Wrong nonce: ' + claims.nonce;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!this.disableAtHashCheck &&\r\n            this.requestAccessToken &&\r\n            !claims['at_hash']) {\r\n            /** @type {?} */\r\n            const err = 'An at_hash is needed!';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        /** @type {?} */\r\n        const now = Date.now();\r\n        /** @type {?} */\r\n        const issuedAtMSec = claims.iat * 1000;\r\n        /** @type {?} */\r\n        const expiresAtMSec = claims.exp * 1000;\r\n        /** @type {?} */\r\n        const clockSkewInMSec = (this.clockSkewInSec || 600) * 1000;\r\n        if (issuedAtMSec - clockSkewInMSec >= now ||\r\n            expiresAtMSec + clockSkewInMSec <= now) {\r\n            /** @type {?} */\r\n            const err = 'Token has expired';\r\n            console.error(err);\r\n            console.error({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec\r\n            });\r\n            return Promise.reject(err);\r\n        }\r\n        /** @type {?} */\r\n        const validationParams = {\r\n            accessToken: accessToken,\r\n            idToken: idToken,\r\n            jwks: this.jwks,\r\n            idTokenClaims: claims,\r\n            idTokenHeader: header,\r\n            loadKeys: (/**\r\n             * @return {?}\r\n             */\r\n            () => this.loadJwks())\r\n        };\r\n        return this.checkAtHash(validationParams)\r\n            .then((/**\r\n         * @param {?} atHashValid\r\n         * @return {?}\r\n         */\r\n        atHashValid => {\r\n            if (!this.disableAtHashCheck &&\r\n                this.requestAccessToken &&\r\n                !atHashValid) {\r\n                /** @type {?} */\r\n                const err = 'Wrong at_hash';\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n            return this.checkSignature(validationParams).then((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => {\r\n                /** @type {?} */\r\n                const result = {\r\n                    idToken: idToken,\r\n                    idTokenClaims: claims,\r\n                    idTokenClaimsJson: claimsJson,\r\n                    idTokenHeader: header,\r\n                    idTokenHeaderJson: headerJson,\r\n                    idTokenExpiresAt: expiresAtMSec\r\n                };\r\n                return result;\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * Returns the received claims about the user.\r\n     * @return {?}\r\n     */\r\n    getIdentityClaims() {\r\n        /** @type {?} */\r\n        const claims = this._storage.getItem('id_token_claims_obj');\r\n        if (!claims) {\r\n            return null;\r\n        }\r\n        return JSON.parse(claims);\r\n    }\r\n    /**\r\n     * Returns the granted scopes from the server.\r\n     * @return {?}\r\n     */\r\n    getGrantedScopes() {\r\n        /** @type {?} */\r\n        const scopes = this._storage.getItem('granted_scopes');\r\n        if (!scopes) {\r\n            return null;\r\n        }\r\n        return JSON.parse(scopes);\r\n    }\r\n    /**\r\n     * Returns the current id_token.\r\n     * @return {?}\r\n     */\r\n    getIdToken() {\r\n        return this._storage\r\n            ? this._storage.getItem('id_token')\r\n            : null;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} base64data\r\n     * @return {?}\r\n     */\r\n    padBase64(base64data) {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += '=';\r\n        }\r\n        return base64data;\r\n    }\r\n    /**\r\n     * Returns the current access_token.\r\n     * @return {?}\r\n     */\r\n    getAccessToken() {\r\n        return this._storage\r\n            ? this._storage.getItem('access_token')\r\n            : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getRefreshToken() {\r\n        return this._storage\r\n            ? this._storage.getItem('refresh_token')\r\n            : null;\r\n    }\r\n    /**\r\n     * Returns the expiration date of the access_token\r\n     * as milliseconds since 1970.\r\n     * @return {?}\r\n     */\r\n    getAccessTokenExpiration() {\r\n        if (!this._storage.getItem('expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('expires_at'), 10);\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getAccessTokenStoredAt() {\r\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getIdTokenStoredAt() {\r\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\r\n    }\r\n    /**\r\n     * Returns the expiration date of the id_token\r\n     * as milliseconds since 1970.\r\n     * @return {?}\r\n     */\r\n    getIdTokenExpiration() {\r\n        if (!this._storage.getItem('id_token_expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\r\n    }\r\n    /**\r\n     * Checkes, whether there is a valid access_token.\r\n     * @return {?}\r\n     */\r\n    hasValidAccessToken() {\r\n        if (this.getAccessToken()) {\r\n            /** @type {?} */\r\n            const expiresAt = this._storage.getItem('expires_at');\r\n            /** @type {?} */\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Checks whether there is a valid id_token.\r\n     * @return {?}\r\n     */\r\n    hasValidIdToken() {\r\n        if (this.getIdToken()) {\r\n            /** @type {?} */\r\n            const expiresAt = this._storage.getItem('id_token_expires_at');\r\n            /** @type {?} */\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns the auth-header that can be used\r\n     * to transmit the access_token to a service\r\n     * @return {?}\r\n     */\r\n    authorizationHeader() {\r\n        return 'Bearer ' + this.getAccessToken();\r\n    }\r\n    /**\r\n     * Removes all tokens and logs the user out.\r\n     * If a logout url is configured, the user is\r\n     * redirected to it.\r\n     * @param {?=} noRedirectToLogoutUrl\r\n     * @return {?}\r\n     */\r\n    logOut(noRedirectToLogoutUrl = false) {\r\n        /** @type {?} */\r\n        const id_token = this.getIdToken();\r\n        this._storage.removeItem('access_token');\r\n        this._storage.removeItem('id_token');\r\n        this._storage.removeItem('refresh_token');\r\n        this._storage.removeItem('nonce');\r\n        this._storage.removeItem('expires_at');\r\n        this._storage.removeItem('id_token_claims_obj');\r\n        this._storage.removeItem('id_token_expires_at');\r\n        this._storage.removeItem('id_token_stored_at');\r\n        this._storage.removeItem('access_token_stored_at');\r\n        this._storage.removeItem('granted_scopes');\r\n        this._storage.removeItem('session_state');\r\n        this.silentRefreshSubject = null;\r\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\r\n        if (!this.logoutUrl) {\r\n            return;\r\n        }\r\n        if (noRedirectToLogoutUrl) {\r\n            return;\r\n        }\r\n        if (!id_token && !this.postLogoutRedirectUri) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let logoutUrl;\r\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\r\n            throw new Error('logoutUrl must use https, or config value for property requireHttps must allow http');\r\n        }\r\n        // For backward compatibility\r\n        if (this.logoutUrl.indexOf('{{') > -1) {\r\n            logoutUrl = this.logoutUrl\r\n                .replace(/\\{\\{id_token\\}\\}/, id_token)\r\n                .replace(/\\{\\{client_id\\}\\}/, this.clientId);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let params = new HttpParams();\r\n            if (id_token) {\r\n                params = params.set('id_token_hint', id_token);\r\n            }\r\n            /** @type {?} */\r\n            const postLogoutUrl = this.postLogoutRedirectUri || this.redirectUri;\r\n            if (postLogoutUrl) {\r\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\r\n            }\r\n            logoutUrl =\r\n                this.logoutUrl +\r\n                    (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\r\n                    params.toString();\r\n        }\r\n        this.config.openUri(logoutUrl);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @return {?}\r\n     */\r\n    createAndSaveNonce() {\r\n        /** @type {?} */\r\n        const that = this;\r\n        return this.createNonce().then((/**\r\n         * @param {?} nonce\r\n         * @return {?}\r\n         */\r\n        function (nonce) {\r\n            that._storage.setItem('nonce', nonce);\r\n            return nonce;\r\n        }));\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.clearAccessTokenTimer();\r\n        this.clearIdTokenTimer();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    createNonce() {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @return {?}\r\n         */\r\n        (resolve) => {\r\n            if (this.rngUrl) {\r\n                throw new Error('createNonce with rng-web-api has not been implemented so far');\r\n            }\r\n            /*\r\n                         * This alphabet uses a-z A-Z 0-9 _- symbols.\r\n                         * Symbols order was changed for better gzip compression.\r\n                         */\r\n            /** @type {?} */\r\n            const url = 'Uint8ArdomValuesObj012345679BCDEFGHIJKLMNPQRSTWXYZ_cfghkpqvwxyz-';\r\n            /** @type {?} */\r\n            let size = 45;\r\n            /** @type {?} */\r\n            let id = '';\r\n            /** @type {?} */\r\n            const crypto = self.crypto || self['msCrypto'];\r\n            if (crypto) {\r\n                /** @type {?} */\r\n                const bytes = crypto.getRandomValues(new Uint8Array(size));\r\n                while (0 < size--) {\r\n                    id += url[bytes[size] & 63];\r\n                }\r\n            }\r\n            else {\r\n                while (0 < size--) {\r\n                    id += url[Math.random() * 64 | 0];\r\n                }\r\n            }\r\n            resolve(id);\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    checkAtHash(params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.tokenValidationHandler) {\r\n                this.logger.warn('No tokenValidationHandler configured. Cannot check at_hash.');\r\n                return true;\r\n            }\r\n            return this.tokenValidationHandler.validateAtHash(params);\r\n        });\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    checkSignature(params) {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn('No tokenValidationHandler configured. Cannot check signature.');\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tokenValidationHandler.validateSignature(params);\r\n    }\r\n    /**\r\n     * Start the implicit flow or the code flow,\r\n     * depending on your configuration.\r\n     * @param {?=} additionalState\r\n     * @param {?=} params\r\n     * @return {?}\r\n     */\r\n    initLoginFlow(additionalState = '', params = {}) {\r\n        if (this.responseType === 'code') {\r\n            return this.initCodeFlow(additionalState, params);\r\n        }\r\n        else {\r\n            return this.initImplicitFlow(additionalState, params);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the authorization code flow and redirects to user to\r\n     * the auth servers login url.\r\n     * @param {?=} additionalState\r\n     * @param {?=} params\r\n     * @return {?}\r\n     */\r\n    initCodeFlow(additionalState = '', params = {}) {\r\n        if (this.loginUrl !== '') {\r\n            this.initCodeFlowInternal(additionalState, params);\r\n        }\r\n        else {\r\n            this.events.pipe(filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.type === 'discovery_document_loaded')))\r\n                .subscribe((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => this.initCodeFlowInternal(additionalState, params)));\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} additionalState\r\n     * @param {?=} params\r\n     * @return {?}\r\n     */\r\n    initCodeFlowInternal(additionalState = '', params = {}) {\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('loginUrl must use Http. Also check property requireHttps.');\r\n        }\r\n        this.createLoginUrl(additionalState, '', null, false, params).then((/**\r\n         * @param {?} url\r\n         * @return {?}\r\n         */\r\n        function (url) {\r\n            location.href = url;\r\n        }))\r\n            .catch((/**\r\n         * @param {?} error\r\n         * @return {?}\r\n         */\r\n        error => {\r\n            console.error('Error in initAuthorizationCodeFlow');\r\n            console.error(error);\r\n        }));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    createChallangeVerifierPairForPKCE() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.crypto) {\r\n                throw new Error('PKCI support for code flow needs a CryptoHander. Did you import the OAuthModule using forRoot() ?');\r\n            }\r\n            /** @type {?} */\r\n            const verifier = yield this.createNonce();\r\n            /** @type {?} */\r\n            const challengeRaw = yield this.crypto.calcHash(verifier, 'sha-256');\r\n            /** @type {?} */\r\n            const challange = base64UrlEncode(challengeRaw);\r\n            return [challange, verifier];\r\n        });\r\n    }\r\n}\r\nOAuthService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nOAuthService.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: HttpClient },\r\n    { type: OAuthStorage, decorators: [{ type: Optional }] },\r\n    { type: ValidationHandler, decorators: [{ type: Optional }] },\r\n    { type: AuthConfig, decorators: [{ type: Optional }] },\r\n    { type: UrlHelperService },\r\n    { type: OAuthLogger },\r\n    { type: CryptoHandler, decorators: [{ type: Optional }] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass OAuthModuleConfig {\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass OAuthResourceServerConfig {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass OAuthResourceServerErrorHandler {\r\n}\r\nclass OAuthNoopResourceServerErrorHandler {\r\n    /**\r\n     * @param {?} err\r\n     * @return {?}\r\n     */\r\n    handleError(err) {\r\n        return throwError(err);\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass DefaultOAuthInterceptor {\r\n    /**\r\n     * @param {?} authStorage\r\n     * @param {?} oAuthService\r\n     * @param {?} errorHandler\r\n     * @param {?} moduleConfig\r\n     */\r\n    constructor(authStorage, oAuthService, errorHandler, moduleConfig) {\r\n        this.authStorage = authStorage;\r\n        this.oAuthService = oAuthService;\r\n        this.errorHandler = errorHandler;\r\n        this.moduleConfig = moduleConfig;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    checkUrl(url) {\r\n        if (this.moduleConfig.resourceServer.customUrlValidation) {\r\n            return this.moduleConfig.resourceServer.customUrlValidation(url);\r\n        }\r\n        if (this.moduleConfig.resourceServer.allowedUrls) {\r\n            return !!this.moduleConfig.resourceServer.allowedUrls.find((/**\r\n             * @param {?} u\r\n             * @return {?}\r\n             */\r\n            u => url.startsWith(u)));\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        /** @type {?} */\r\n        const url = req.url.toLowerCase();\r\n        if (!this.moduleConfig) {\r\n            return next.handle(req);\r\n        }\r\n        if (!this.moduleConfig.resourceServer) {\r\n            return next.handle(req);\r\n        }\r\n        if (this.moduleConfig.resourceServer.allowedUrls && !this.checkUrl(url)) {\r\n            return next.handle(req);\r\n        }\r\n        /** @type {?} */\r\n        const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\r\n        if (!sendAccessToken) {\r\n            return next\r\n                .handle(req)\r\n                .pipe(catchError((/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => this.errorHandler.handleError(err))));\r\n        }\r\n        return merge(of(this.oAuthService.getAccessToken()).pipe(filter((/**\r\n         * @param {?} token\r\n         * @return {?}\r\n         */\r\n        token => token ? true : false))), this.oAuthService.events.pipe(filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.type === 'token_received')), timeout(this.oAuthService.waitForTokenInMsec || 0), catchError((/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        _ => of(null))), // timeout is not an error\r\n        map((/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        _ => this.oAuthService.getAccessToken())))).pipe(take(1), mergeMap((/**\r\n         * @param {?} token\r\n         * @return {?}\r\n         */\r\n        token => {\r\n            if (token) {\r\n                /** @type {?} */\r\n                const header = 'Bearer ' + token;\r\n                /** @type {?} */\r\n                const headers = req.headers.set('Authorization', header);\r\n                req = req.clone({ headers });\r\n            }\r\n            return next\r\n                .handle(req)\r\n                .pipe(catchError((/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            err => this.errorHandler.handleError(err))));\r\n        })));\r\n    }\r\n}\r\nDefaultOAuthInterceptor.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDefaultOAuthInterceptor.ctorParameters = () => [\r\n    { type: OAuthStorage },\r\n    { type: OAuthService },\r\n    { type: OAuthResourceServerErrorHandler },\r\n    { type: OAuthModuleConfig, decorators: [{ type: Optional }] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A validation handler that isn't validating nothing.\r\n * Can be used to skip validation (at your own risk).\r\n */\r\nclass NullValidationHandler {\r\n    /**\r\n     * @param {?} validationParams\r\n     * @return {?}\r\n     */\r\n    validateSignature(validationParams) {\r\n        return Promise.resolve(null);\r\n    }\r\n    /**\r\n     * @param {?} validationParams\r\n     * @return {?}\r\n     */\r\n    validateAtHash(validationParams) {\r\n        return Promise.resolve(true);\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction createDefaultLogger() {\r\n    return console;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createDefaultStorage() {\r\n    return typeof sessionStorage !== 'undefined' ? sessionStorage : null;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Validates the signature of an id_token against one\r\n * of the keys of an JSON Web Key Set (jwks).\r\n *\r\n * This jwks can be provided by the discovery document.\r\n */\r\nclass JwksValidationHandler extends AbstractValidationHandler {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Allowed algorithms\r\n         */\r\n        this.allowedAlgorithms = [\r\n            'HS256',\r\n            'HS384',\r\n            'HS512',\r\n            'RS256',\r\n            'RS384',\r\n            'RS512',\r\n            'ES256',\r\n            'ES384',\r\n            'PS256',\r\n            'PS384',\r\n            'PS512'\r\n        ];\r\n        /**\r\n         * Time period in seconds the timestamp in the signature can\r\n         * differ from the current time.\r\n         */\r\n        this.gracePeriodInSec = 600;\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @param {?=} retry\r\n     * @return {?}\r\n     */\r\n    validateSignature(params, retry = false) {\r\n        if (!params.idToken)\r\n            throw new Error('Parameter idToken expected!');\r\n        if (!params.idTokenHeader)\r\n            throw new Error('Parameter idTokenHandler expected.');\r\n        if (!params.jwks)\r\n            throw new Error('Parameter jwks expected!');\r\n        if (!params.jwks['keys'] ||\r\n            !Array.isArray(params.jwks['keys']) ||\r\n            params.jwks['keys'].length === 0) {\r\n            throw new Error('Array keys in jwks missing!');\r\n        }\r\n        // console.debug('validateSignature: retry', retry);\r\n        /** @type {?} */\r\n        let kid = params.idTokenHeader['kid'];\r\n        /** @type {?} */\r\n        let keys = params.jwks['keys'];\r\n        /** @type {?} */\r\n        let key;\r\n        /** @type {?} */\r\n        let alg = params.idTokenHeader['alg'];\r\n        if (kid) {\r\n            key = keys.find((/**\r\n             * @param {?} k\r\n             * @return {?}\r\n             */\r\n            k => k['kid'] === kid /* && k['use'] === 'sig' */));\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let kty = this.alg2kty(alg);\r\n            /** @type {?} */\r\n            let matchingKeys = keys.filter((/**\r\n             * @param {?} k\r\n             * @return {?}\r\n             */\r\n            k => k['kty'] === kty && k['use'] === 'sig'));\r\n            /*\r\n                  if (matchingKeys.length == 0) {\r\n                      let error = 'No matching key found.';\r\n                      console.error(error);\r\n                      return Promise.reject(error);\r\n                  }*/\r\n            if (matchingKeys.length > 1) {\r\n                /** @type {?} */\r\n                let error = 'More than one matching key found. Please specify a kid in the id_token header.';\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n            else if (matchingKeys.length === 1) {\r\n                key = matchingKeys[0];\r\n            }\r\n        }\r\n        if (!key && !retry && params.loadKeys) {\r\n            return params\r\n                .loadKeys()\r\n                .then((/**\r\n             * @param {?} loadedKeys\r\n             * @return {?}\r\n             */\r\n            loadedKeys => (params.jwks = loadedKeys)))\r\n                .then((/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            _ => this.validateSignature(params, true)));\r\n        }\r\n        if (!key && retry && !kid) {\r\n            /** @type {?} */\r\n            let error = 'No matching key found.';\r\n            console.error(error);\r\n            return Promise.reject(error);\r\n        }\r\n        if (!key && retry && kid) {\r\n            /** @type {?} */\r\n            let error = 'expected key not found in property jwks. ' +\r\n                'This property is most likely loaded with the ' +\r\n                'discovery document. ' +\r\n                'Expected key id (kid): ' +\r\n                kid;\r\n            console.error(error);\r\n            return Promise.reject(error);\r\n        }\r\n        /** @type {?} */\r\n        let keyObj = KEYUTIL.getKey(key);\r\n        /** @type {?} */\r\n        let validationOptions = {\r\n            alg: this.allowedAlgorithms,\r\n            gracePeriod: this.gracePeriodInSec\r\n        };\r\n        /** @type {?} */\r\n        let isValid = KJUR.jws.JWS.verifyJWT(params.idToken, keyObj, validationOptions);\r\n        if (isValid) {\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            return Promise.reject('Signature not valid');\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} alg\r\n     * @return {?}\r\n     */\r\n    alg2kty(alg) {\r\n        switch (alg.charAt(0)) {\r\n            case 'R':\r\n                return 'RSA';\r\n            case 'E':\r\n                return 'EC';\r\n            default:\r\n                throw new Error('Cannot infer kty from alg: ' + alg);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} valueToHash\r\n     * @param {?} algorithm\r\n     * @return {?}\r\n     */\r\n    calcHash(valueToHash, algorithm) {\r\n        /** @type {?} */\r\n        let hashAlg = new KJUR.crypto.MessageDigest({ alg: algorithm });\r\n        /** @type {?} */\r\n        let result = hashAlg.digestString(valueToHash);\r\n        /** @type {?} */\r\n        let byteArrayAsString = this.toByteArrayAsString(result);\r\n        return Promise.resolve(byteArrayAsString);\r\n    }\r\n    /**\r\n     * @param {?} hexString\r\n     * @return {?}\r\n     */\r\n    toByteArrayAsString(hexString) {\r\n        /** @type {?} */\r\n        let result = '';\r\n        for (let i = 0; i < hexString.length; i += 2) {\r\n            /** @type {?} */\r\n            let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\r\n            /** @type {?} */\r\n            let num = parseInt(hexDigit, 16);\r\n            result += String.fromCharCode(num);\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass OAuthModule {\r\n    /**\r\n     * @param {?=} config\r\n     * @param {?=} validationHandlerClass\r\n     * @return {?}\r\n     */\r\n    static forRoot(config = null, validationHandlerClass = NullValidationHandler) {\r\n        return {\r\n            ngModule: OAuthModule,\r\n            providers: [\r\n                OAuthService,\r\n                UrlHelperService,\r\n                { provide: OAuthLogger, useFactory: createDefaultLogger },\r\n                { provide: OAuthStorage, useFactory: createDefaultStorage },\r\n                { provide: ValidationHandler, useClass: validationHandlerClass },\r\n                { provide: CryptoHandler, useClass: JwksValidationHandler },\r\n                {\r\n                    provide: OAuthResourceServerErrorHandler,\r\n                    useClass: OAuthNoopResourceServerErrorHandler\r\n                },\r\n                { provide: OAuthModuleConfig, useValue: config },\r\n                {\r\n                    provide: HTTP_INTERCEPTORS,\r\n                    useClass: DefaultOAuthInterceptor,\r\n                    multi: true\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nOAuthModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [],\r\n                exports: []\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst AUTH_CONFIG = new InjectionToken('AUTH_CONFIG');\n\nexport { AUTH_CONFIG, AbstractValidationHandler, AuthConfig, DefaultOAuthInterceptor, JwksValidationHandler, LoginOptions, NullValidationHandler, OAuthErrorEvent, OAuthEvent, OAuthInfoEvent, OAuthLogger, OAuthModule, OAuthModuleConfig, OAuthNoopResourceServerErrorHandler, OAuthResourceServerConfig, OAuthResourceServerErrorHandler, OAuthService, OAuthStorage, OAuthSuccessEvent, ReceivedTokens, UrlHelperService, ValidationHandler, CryptoHandler as ɵa, createDefaultLogger as ɵb, createDefaultStorage as ɵc };\n"]}