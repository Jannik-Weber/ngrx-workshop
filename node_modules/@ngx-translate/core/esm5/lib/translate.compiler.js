/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateCompiler = /** @class */ (function () {
    function TranslateCompiler() {
    }
    return TranslateCompiler;
}());
/**
 * @abstract
 */
export { TranslateCompiler };
if (false) {
    /**
     * @abstract
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compile = function (value, lang) { };
    /**
     * @abstract
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };
}
/**
 * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all
 */
var TranslateFakeCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TranslateFakeCompiler, _super);
    function TranslateFakeCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compile = /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    function (value, lang) {
        return value;
    };
    /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compileTranslations = /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    function (translations, lang) {
        return translations;
    };
TranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) { return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler); };
TranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: function (t) { return TranslateFakeCompiler.ɵfac(t); } });
var ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{
        type: Injectable
    }], null, null); })();
    return TranslateFakeCompiler;
}(TranslateCompiler));
export { TranslateFakeCompiler };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2Jhay9iZXJhdHVuZy9hbmd1bGFyMi93b3Jrc2hvcHNfYWR2YW5jZWQvYWR2YW5jZWQtbngtd29ya3NwYWNlL25vZGVfbW9kdWxlcy9Abmd4LXRyYW5zbGF0ZS9jb3JlL2VzbTUvbGliL3RyYW5zbGF0ZS5jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BNkRNOzs7Ozs7MEJBR0EiLCJmaWxlIjoidHJhbnNsYXRlLmNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogQGFic3RyYWN0XG4gKi9cbnZhciAvKipcbiAqIEBhYnN0cmFjdFxuICovXG5UcmFuc2xhdGVDb21waWxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFuc2xhdGVDb21waWxlcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFRyYW5zbGF0ZUNvbXBpbGVyO1xufSgpKTtcbi8qKlxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCB7IFRyYW5zbGF0ZUNvbXBpbGVyIH07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/fSBsYW5nXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2xhdGVDb21waWxlci5wcm90b3R5cGUuY29tcGlsZSA9IGZ1bmN0aW9uICh2YWx1ZSwgbGFuZykgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gdHJhbnNsYXRpb25zXG4gICAgICogQHBhcmFtIHs/fSBsYW5nXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2xhdGVDb21waWxlci5wcm90b3R5cGUuY29tcGlsZVRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbnMsIGxhbmcpIHsgfTtcbn1cbi8qKlxuICogVGhpcyBjb21waWxlciBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgdGhhdCBkb2VzIG5vdGhpbmcsIGluIGNhc2UgeW91IGRvbid0IG5lZWQgYSBjb21waWxlciBhdCBhbGxcbiAqL1xudmFyIFRyYW5zbGF0ZUZha2VDb21waWxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUcmFuc2xhdGVGYWtlQ29tcGlsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRlRmFrZUNvbXBpbGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGxhbmdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zbGF0ZUZha2VDb21waWxlci5wcm90b3R5cGUuY29tcGlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGxhbmdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2YWx1ZSwgbGFuZykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRyYW5zbGF0aW9uc1xuICAgICAqIEBwYXJhbSB7P30gbGFuZ1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNsYXRlRmFrZUNvbXBpbGVyLnByb3RvdHlwZS5jb21waWxlVHJhbnNsYXRpb25zID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0cmFuc2xhdGlvbnNcbiAgICAgKiBAcGFyYW0gez99IGxhbmdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0cmFuc2xhdGlvbnMsIGxhbmcpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9ucztcbiAgICB9O1xuICAgIFRyYW5zbGF0ZUZha2VDb21waWxlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIFRyYW5zbGF0ZUZha2VDb21waWxlcjtcbn0oVHJhbnNsYXRlQ29tcGlsZXIpKTtcbmV4cG9ydCB7IFRyYW5zbGF0ZUZha2VDb21waWxlciB9O1xuIl19