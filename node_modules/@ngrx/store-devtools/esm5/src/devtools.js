import * as tslib_1 from "tslib";
import { Injectable, Inject, ErrorHandler } from '@angular/core';
import { ActionsSubject, INITIAL_STATE, ReducerObservable, ScannedActionsSubject, } from '@ngrx/store';
import { merge, queueScheduler, ReplaySubject, } from 'rxjs';
import { map, observeOn, scan, skip, withLatestFrom } from 'rxjs/operators';
import * as Actions from './actions';
import { STORE_DEVTOOLS_CONFIG, StoreDevtoolsConfig } from './config';
import { DevtoolsExtension } from './extension';
import { liftInitialState, liftReducerWith } from './reducer';
import { liftAction, unliftState, shouldFilterActions, filterLiftedState, } from './utils';
import { DevtoolsDispatcher } from './devtools-dispatcher';
import { PERFORM_ACTION } from './actions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngrx/store';
var StoreDevtools = /** @class */ (function () {
    function StoreDevtools(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {
        var _this = this;
        var liftedInitialState = liftInitialState(initialState, config.monitor);
        var liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);
        var liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));
        var liftedReducer$ = reducers$.pipe(map(liftReducer));
        var liftedStateSubject = new ReplaySubject(1);
        var liftedStateSubscription = liftedAction$
            .pipe(withLatestFrom(liftedReducer$), scan(function (_a, _b) {
            var liftedState = _a.state;
            var _c = tslib_1.__read(_b, 2), action = _c[0], reducer = _c[1];
            var reducedLiftedState = reducer(liftedState, action);
            // On full state update
            // If we have actions filters, we must filter completely our lifted state to be sync with the extension
            if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {
                reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);
            }
            // Extension should be sent the sanitized lifted state
            extension.notify(action, reducedLiftedState);
            return { state: reducedLiftedState, action: action };
        }, { state: liftedInitialState, action: null }))
            .subscribe(function (_a) {
            var state = _a.state, action = _a.action;
            liftedStateSubject.next(state);
            if (action.type === Actions.PERFORM_ACTION) {
                var unliftedAction = action.action;
                scannedActions.next(unliftedAction);
            }
        });
        var extensionStartSubscription = extension.start$.subscribe(function () {
            _this.refresh();
        });
        var liftedState$ = liftedStateSubject.asObservable();
        var state$ = liftedState$.pipe(map(unliftState));
        this.extensionStartSubscription = extensionStartSubscription;
        this.stateSubscription = liftedStateSubscription;
        this.dispatcher = dispatcher;
        this.liftedState = liftedState$;
        this.state = state$;
    }
    StoreDevtools.prototype.dispatch = function (action) {
        this.dispatcher.next(action);
    };
    StoreDevtools.prototype.next = function (action) {
        this.dispatcher.next(action);
    };
    StoreDevtools.prototype.error = function (error) { };
    StoreDevtools.prototype.complete = function () { };
    StoreDevtools.prototype.performAction = function (action) {
        this.dispatch(new Actions.PerformAction(action, +Date.now()));
    };
    StoreDevtools.prototype.refresh = function () {
        this.dispatch(new Actions.Refresh());
    };
    StoreDevtools.prototype.reset = function () {
        this.dispatch(new Actions.Reset(+Date.now()));
    };
    StoreDevtools.prototype.rollback = function () {
        this.dispatch(new Actions.Rollback(+Date.now()));
    };
    StoreDevtools.prototype.commit = function () {
        this.dispatch(new Actions.Commit(+Date.now()));
    };
    StoreDevtools.prototype.sweep = function () {
        this.dispatch(new Actions.Sweep());
    };
    StoreDevtools.prototype.toggleAction = function (id) {
        this.dispatch(new Actions.ToggleAction(id));
    };
    StoreDevtools.prototype.jumpToAction = function (actionId) {
        this.dispatch(new Actions.JumpToAction(actionId));
    };
    StoreDevtools.prototype.jumpToState = function (index) {
        this.dispatch(new Actions.JumpToState(index));
    };
    StoreDevtools.prototype.importState = function (nextLiftedState) {
        this.dispatch(new Actions.ImportState(nextLiftedState));
    };
    StoreDevtools.prototype.lockChanges = function (status) {
        this.dispatch(new Actions.LockChanges(status));
    };
    StoreDevtools.prototype.pauseRecording = function (status) {
        this.dispatch(new Actions.PauseRecording(status));
    };
    StoreDevtools = tslib_1.__decorate([ tslib_1.__param(6, Inject(INITIAL_STATE)),
        tslib_1.__param(7, Inject(STORE_DEVTOOLS_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [DevtoolsDispatcher,
            ActionsSubject,
            ReducerObservable,
            DevtoolsExtension,
            ScannedActionsSubject,
            ErrorHandler, Object, StoreDevtoolsConfig])
    ], StoreDevtools);
StoreDevtools.ɵfac = function StoreDevtools_Factory(t) { return new (t || StoreDevtools)(ɵngcc0.ɵɵinject(DevtoolsDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerObservable), ɵngcc0.ɵɵinject(DevtoolsExtension), ɵngcc0.ɵɵinject(ɵngcc1.ScannedActionsSubject), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG)); };
StoreDevtools.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StoreDevtools, factory: function (t) { return StoreDevtools.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreDevtools, [{
        type: Injectable
    }], function () { return [{ type: DevtoolsDispatcher }, { type: ɵngcc1.ActionsSubject }, { type: ɵngcc1.ReducerObservable }, { type: DevtoolsExtension }, { type: ɵngcc1.ScannedActionsSubject }, { type: ɵngcc0.ErrorHandler }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: StoreDevtoolsConfig, decorators: [{
                type: Inject,
                args: [STORE_DEVTOOLS_CONFIG]
            }] }]; }, null); })();
    return StoreDevtools;
}());
export { StoreDevtools };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2Jhay9iZXJhdHVuZy9hbmd1bGFyMi93b3Jrc2hvcHNfYWR2YW5jZWQvYWR2YW5jZWQtbngtd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AbmdyeC9zdG9yZS1kZXZ0b29scy9lc201L3NyYy9kZXZ0b29scy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FxRndDLEFBRWpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQVFlIiwiZmlsZSI6ImRldnRvb2xzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgRXJyb3JIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCwgSU5JVElBTF9TVEFURSwgUmVkdWNlck9ic2VydmFibGUsIFNjYW5uZWRBY3Rpb25zU3ViamVjdCwgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBtZXJnZSwgcXVldWVTY2hlZHVsZXIsIFJlcGxheVN1YmplY3QsIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG9ic2VydmVPbiwgc2Nhbiwgc2tpcCwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBTVE9SRV9ERVZUT09MU19DT05GSUcsIFN0b3JlRGV2dG9vbHNDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBEZXZ0b29sc0V4dGVuc2lvbiB9IGZyb20gJy4vZXh0ZW5zaW9uJztcbmltcG9ydCB7IGxpZnRJbml0aWFsU3RhdGUsIGxpZnRSZWR1Y2VyV2l0aCB9IGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgeyBsaWZ0QWN0aW9uLCB1bmxpZnRTdGF0ZSwgc2hvdWxkRmlsdGVyQWN0aW9ucywgZmlsdGVyTGlmdGVkU3RhdGUsIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBEZXZ0b29sc0Rpc3BhdGNoZXIgfSBmcm9tICcuL2RldnRvb2xzLWRpc3BhdGNoZXInO1xuaW1wb3J0IHsgUEVSRk9STV9BQ1RJT04gfSBmcm9tICcuL2FjdGlvbnMnO1xudmFyIFN0b3JlRGV2dG9vbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RvcmVEZXZ0b29scyhkaXNwYXRjaGVyLCBhY3Rpb25zJCwgcmVkdWNlcnMkLCBleHRlbnNpb24sIHNjYW5uZWRBY3Rpb25zLCBlcnJvckhhbmRsZXIsIGluaXRpYWxTdGF0ZSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBsaWZ0ZWRJbml0aWFsU3RhdGUgPSBsaWZ0SW5pdGlhbFN0YXRlKGluaXRpYWxTdGF0ZSwgY29uZmlnLm1vbml0b3IpO1xuICAgICAgICB2YXIgbGlmdFJlZHVjZXIgPSBsaWZ0UmVkdWNlcldpdGgoaW5pdGlhbFN0YXRlLCBsaWZ0ZWRJbml0aWFsU3RhdGUsIGVycm9ySGFuZGxlciwgY29uZmlnLm1vbml0b3IsIGNvbmZpZyk7XG4gICAgICAgIHZhciBsaWZ0ZWRBY3Rpb24kID0gbWVyZ2UobWVyZ2UoYWN0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShza2lwKDEpKSwgZXh0ZW5zaW9uLmFjdGlvbnMkKS5waXBlKG1hcChsaWZ0QWN0aW9uKSksIGRpc3BhdGNoZXIsIGV4dGVuc2lvbi5saWZ0ZWRBY3Rpb25zJCkucGlwZShvYnNlcnZlT24ocXVldWVTY2hlZHVsZXIpKTtcbiAgICAgICAgdmFyIGxpZnRlZFJlZHVjZXIkID0gcmVkdWNlcnMkLnBpcGUobWFwKGxpZnRSZWR1Y2VyKSk7XG4gICAgICAgIHZhciBsaWZ0ZWRTdGF0ZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgICAgICAgdmFyIGxpZnRlZFN0YXRlU3Vic2NyaXB0aW9uID0gbGlmdGVkQWN0aW9uJFxuICAgICAgICAgICAgLnBpcGUod2l0aExhdGVzdEZyb20obGlmdGVkUmVkdWNlciQpLCBzY2FuKGZ1bmN0aW9uIChfYSwgX2IpIHtcbiAgICAgICAgICAgIHZhciBsaWZ0ZWRTdGF0ZSA9IF9hLnN0YXRlO1xuICAgICAgICAgICAgdmFyIF9jID0gdHNsaWJfMS5fX3JlYWQoX2IsIDIpLCBhY3Rpb24gPSBfY1swXSwgcmVkdWNlciA9IF9jWzFdO1xuICAgICAgICAgICAgdmFyIHJlZHVjZWRMaWZ0ZWRTdGF0ZSA9IHJlZHVjZXIobGlmdGVkU3RhdGUsIGFjdGlvbik7XG4gICAgICAgICAgICAvLyBPbiBmdWxsIHN0YXRlIHVwZGF0ZVxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhY3Rpb25zIGZpbHRlcnMsIHdlIG11c3QgZmlsdGVyIGNvbXBsZXRlbHkgb3VyIGxpZnRlZCBzdGF0ZSB0byBiZSBzeW5jIHdpdGggdGhlIGV4dGVuc2lvblxuICAgICAgICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSBQRVJGT1JNX0FDVElPTiAmJiBzaG91bGRGaWx0ZXJBY3Rpb25zKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZWR1Y2VkTGlmdGVkU3RhdGUgPSBmaWx0ZXJMaWZ0ZWRTdGF0ZShyZWR1Y2VkTGlmdGVkU3RhdGUsIGNvbmZpZy5wcmVkaWNhdGUsIGNvbmZpZy5hY3Rpb25zU2FmZWxpc3QsIGNvbmZpZy5hY3Rpb25zQmxvY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4dGVuc2lvbiBzaG91bGQgYmUgc2VudCB0aGUgc2FuaXRpemVkIGxpZnRlZCBzdGF0ZVxuICAgICAgICAgICAgZXh0ZW5zaW9uLm5vdGlmeShhY3Rpb24sIHJlZHVjZWRMaWZ0ZWRTdGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogcmVkdWNlZExpZnRlZFN0YXRlLCBhY3Rpb246IGFjdGlvbiB9O1xuICAgICAgICB9LCB7IHN0YXRlOiBsaWZ0ZWRJbml0aWFsU3RhdGUsIGFjdGlvbjogbnVsbCB9KSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBfYS5zdGF0ZSwgYWN0aW9uID0gX2EuYWN0aW9uO1xuICAgICAgICAgICAgbGlmdGVkU3RhdGVTdWJqZWN0Lm5leHQoc3RhdGUpO1xuICAgICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBBY3Rpb25zLlBFUkZPUk1fQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVubGlmdGVkQWN0aW9uID0gYWN0aW9uLmFjdGlvbjtcbiAgICAgICAgICAgICAgICBzY2FubmVkQWN0aW9ucy5uZXh0KHVubGlmdGVkQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBleHRlbnNpb25TdGFydFN1YnNjcmlwdGlvbiA9IGV4dGVuc2lvbi5zdGFydCQuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBsaWZ0ZWRTdGF0ZSQgPSBsaWZ0ZWRTdGF0ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHZhciBzdGF0ZSQgPSBsaWZ0ZWRTdGF0ZSQucGlwZShtYXAodW5saWZ0U3RhdGUpKTtcbiAgICAgICAgdGhpcy5leHRlbnNpb25TdGFydFN1YnNjcmlwdGlvbiA9IGV4dGVuc2lvblN0YXJ0U3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaXB0aW9uID0gbGlmdGVkU3RhdGVTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG4gICAgICAgIHRoaXMubGlmdGVkU3RhdGUgPSBsaWZ0ZWRTdGF0ZSQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZSQ7XG4gICAgfVxuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIubmV4dChhY3Rpb24pO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoYWN0aW9uKTtcbiAgICB9O1xuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7IH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQWN0aW9ucy5QZXJmb3JtQWN0aW9uKGFjdGlvbiwgK0RhdGUubm93KCkpKTtcbiAgICB9O1xuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2gobmV3IEFjdGlvbnMuUmVmcmVzaCgpKTtcbiAgICB9O1xuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBBY3Rpb25zLlJlc2V0KCtEYXRlLm5vdygpKSk7XG4gICAgfTtcbiAgICBTdG9yZURldnRvb2xzLnByb3RvdHlwZS5yb2xsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQWN0aW9ucy5Sb2xsYmFjaygrRGF0ZS5ub3coKSkpO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBBY3Rpb25zLkNvbW1pdCgrRGF0ZS5ub3coKSkpO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUuc3dlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2gobmV3IEFjdGlvbnMuU3dlZXAoKSk7XG4gICAgfTtcbiAgICBTdG9yZURldnRvb2xzLnByb3RvdHlwZS50b2dnbGVBY3Rpb24gPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQWN0aW9ucy5Ub2dnbGVBY3Rpb24oaWQpKTtcbiAgICB9O1xuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLmp1bXBUb0FjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb25JZCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBBY3Rpb25zLkp1bXBUb0FjdGlvbihhY3Rpb25JZCkpO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUuanVtcFRvU3RhdGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQWN0aW9ucy5KdW1wVG9TdGF0ZShpbmRleCkpO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scy5wcm90b3R5cGUuaW1wb3J0U3RhdGUgPSBmdW5jdGlvbiAobmV4dExpZnRlZFN0YXRlKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2gobmV3IEFjdGlvbnMuSW1wb3J0U3RhdGUobmV4dExpZnRlZFN0YXRlKSk7XG4gICAgfTtcbiAgICBTdG9yZURldnRvb2xzLnByb3RvdHlwZS5sb2NrQ2hhbmdlcyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQWN0aW9ucy5Mb2NrQ2hhbmdlcyhzdGF0dXMpKTtcbiAgICB9O1xuICAgIFN0b3JlRGV2dG9vbHMucHJvdG90eXBlLnBhdXNlUmVjb3JkaW5nID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBBY3Rpb25zLlBhdXNlUmVjb3JkaW5nKHN0YXR1cykpO1xuICAgIH07XG4gICAgU3RvcmVEZXZ0b29scyA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDYsIEluamVjdChJTklUSUFMX1NUQVRFKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSg3LCBJbmplY3QoU1RPUkVfREVWVE9PTFNfQ09ORklHKSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtEZXZ0b29sc0Rpc3BhdGNoZXIsXG4gICAgICAgICAgICBBY3Rpb25zU3ViamVjdCxcbiAgICAgICAgICAgIFJlZHVjZXJPYnNlcnZhYmxlLFxuICAgICAgICAgICAgRGV2dG9vbHNFeHRlbnNpb24sXG4gICAgICAgICAgICBTY2FubmVkQWN0aW9uc1N1YmplY3QsXG4gICAgICAgICAgICBFcnJvckhhbmRsZXIsIE9iamVjdCwgU3RvcmVEZXZ0b29sc0NvbmZpZ10pXG4gICAgXSwgU3RvcmVEZXZ0b29scyk7XG4gICAgcmV0dXJuIFN0b3JlRGV2dG9vbHM7XG59KCkpO1xuZXhwb3J0IHsgU3RvcmVEZXZ0b29scyB9O1xuIl19