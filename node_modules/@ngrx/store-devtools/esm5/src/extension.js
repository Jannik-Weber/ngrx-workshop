import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken } from '@angular/core';
import { UPDATE } from '@ngrx/store';
import { empty, Observable, of } from 'rxjs';
import { catchError, concatMap, debounceTime, filter, map, share, switchMap, take, takeUntil, timeout, } from 'rxjs/operators';
import { IMPORT_STATE, PERFORM_ACTION } from './actions';
import { STORE_DEVTOOLS_CONFIG, StoreDevtoolsConfig, } from './config';
import { DevtoolsDispatcher } from './devtools-dispatcher';
import { isActionFiltered, sanitizeAction, sanitizeActions, sanitizeState, sanitizeStates, shouldFilterActions, unliftState, } from './utils';
import * as ɵngcc0 from '@angular/core';
export var ExtensionActionTypes = {
    START: 'START',
    DISPATCH: 'DISPATCH',
    STOP: 'STOP',
    ACTION: 'ACTION',
};
export var REDUX_DEVTOOLS_EXTENSION = new InjectionToken('Redux Devtools Extension');
var DevtoolsExtension = /** @class */ (function () {
    function DevtoolsExtension(devtoolsExtension, config, dispatcher) {
        this.config = config;
        this.dispatcher = dispatcher;
        this.devtoolsExtension = devtoolsExtension;
        this.createActionStreams();
    }
    DevtoolsExtension.prototype.notify = function (action, state) {
        var _this = this;
        if (!this.devtoolsExtension) {
            return;
        }
        // Check to see if the action requires a full update of the liftedState.
        // If it is a simple action generated by the user's app and the recording
        // is not locked/paused, only send the action and the current state (fast).
        //
        // A full liftedState update (slow: serializes the entire liftedState) is
        // only required when:
        //   a) redux-devtools-extension fires the @@Init action (ignored by
        //      @ngrx/store-devtools)
        //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init
        //      or @ngrx/store/update-reducers)
        //   c) the state has been recomputed due to time-traveling
        //   d) any action that is not a PerformAction to err on the side of
        //      caution.
        if (action.type === PERFORM_ACTION) {
            if (state.isLocked || state.isPaused) {
                return;
            }
            var currentState = unliftState(state);
            if (shouldFilterActions(this.config) &&
                isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {
                return;
            }
            var sanitizedState_1 = this.config.stateSanitizer
                ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex)
                : currentState;
            var sanitizedAction_1 = this.config.actionSanitizer
                ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId)
                : action;
            this.sendToReduxDevtools(function () {
                return _this.extensionConnection.send(sanitizedAction_1, sanitizedState_1);
            });
        }
        else {
            // Requires full state update
            var sanitizedLiftedState_1 = tslib_1.__assign({}, state, { stagedActionIds: state.stagedActionIds, actionsById: this.config.actionSanitizer
                    ? sanitizeActions(this.config.actionSanitizer, state.actionsById)
                    : state.actionsById, computedStates: this.config.stateSanitizer
                    ? sanitizeStates(this.config.stateSanitizer, state.computedStates)
                    : state.computedStates });
            this.sendToReduxDevtools(function () {
                return _this.devtoolsExtension.send(null, sanitizedLiftedState_1, _this.getExtensionConfig(_this.config));
            });
        }
    };
    DevtoolsExtension.prototype.createChangesObservable = function () {
        var _this = this;
        if (!this.devtoolsExtension) {
            return empty();
        }
        return new Observable(function (subscriber) {
            var connection = _this.devtoolsExtension.connect(_this.getExtensionConfig(_this.config));
            _this.extensionConnection = connection;
            connection.init();
            connection.subscribe(function (change) { return subscriber.next(change); });
            return connection.unsubscribe;
        });
    };
    DevtoolsExtension.prototype.createActionStreams = function () {
        var _this = this;
        // Listens to all changes
        var changes$ = this.createChangesObservable().pipe(share());
        // Listen for the start action
        var start$ = changes$.pipe(filter(function (change) { return change.type === ExtensionActionTypes.START; }));
        // Listen for the stop action
        var stop$ = changes$.pipe(filter(function (change) { return change.type === ExtensionActionTypes.STOP; }));
        // Listen for lifted actions
        var liftedActions$ = changes$.pipe(filter(function (change) { return change.type === ExtensionActionTypes.DISPATCH; }), map(function (change) { return _this.unwrapAction(change.payload); }), concatMap(function (action) {
            if (action.type === IMPORT_STATE) {
                // State imports may happen in two situations:
                // 1. Explicitly by user
                // 2. User activated the "persist state accross reloads" option
                //    and now the state is imported during reload.
                // Because of option 2, we need to give possible
                // lazy loaded reducers time to instantiate.
                // As soon as there is no UPDATE action within 1 second,
                // it is assumed that all reducers are loaded.
                return _this.dispatcher.pipe(filter(function (action) { return action.type === UPDATE; }), timeout(1000), debounceTime(1000), map(function () { return action; }), catchError(function () { return of(action); }), take(1));
            }
            else {
                return of(action);
            }
        }));
        // Listen for unlifted actions
        var actions$ = changes$.pipe(filter(function (change) { return change.type === ExtensionActionTypes.ACTION; }), map(function (change) { return _this.unwrapAction(change.payload); }));
        var actionsUntilStop$ = actions$.pipe(takeUntil(stop$));
        var liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));
        this.start$ = start$.pipe(takeUntil(stop$));
        // Only take the action sources between the start/stop events
        this.actions$ = this.start$.pipe(switchMap(function () { return actionsUntilStop$; }));
        this.liftedActions$ = this.start$.pipe(switchMap(function () { return liftedUntilStop$; }));
    };
    DevtoolsExtension.prototype.unwrapAction = function (action) {
        return typeof action === 'string' ? eval("(" + action + ")") : action;
    };
    DevtoolsExtension.prototype.getExtensionConfig = function (config) {
        var extensionOptions = {
            name: config.name,
            features: config.features,
            serialize: config.serialize,
        };
        if (config.maxAge !== false /* support === 0 */) {
            extensionOptions.maxAge = config.maxAge;
        }
        return extensionOptions;
    };
    DevtoolsExtension.prototype.sendToReduxDevtools = function (send) {
        try {
            send();
        }
        catch (err) {
            console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);
        }
    };
    DevtoolsExtension = tslib_1.__decorate([ tslib_1.__param(0, Inject(REDUX_DEVTOOLS_EXTENSION)),
        tslib_1.__param(1, Inject(STORE_DEVTOOLS_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [Object, StoreDevtoolsConfig,
            DevtoolsDispatcher])
    ], DevtoolsExtension);
DevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) { return new (t || DevtoolsExtension)(ɵngcc0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG), ɵngcc0.ɵɵinject(DevtoolsDispatcher)); };
DevtoolsExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DevtoolsExtension, factory: function (t) { return DevtoolsExtension.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DevtoolsExtension, [{
        type: Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [REDUX_DEVTOOLS_EXTENSION]
            }] }, { type: StoreDevtoolsConfig, decorators: [{
                type: Inject,
                args: [STORE_DEVTOOLS_CONFIG]
            }] }, { type: DevtoolsDispatcher }]; }, null); })();
    return DevtoolsExtension;
}());
export { DevtoolsExtension };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2Jhay9iZXJhdHVuZy9hbmd1bGFyMi93b3Jrc2hvcHNfYWR2YW5jZWQvYWR2YW5jZWQtbngtd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AbmdyeC9zdG9yZS1kZXZ0b29scy9lc201L3NyYy9leHRlbnNpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQW9JNEMsQUFFckM7Ozs7Ozs7Ozs7Ozs7OztnRUFJbUIiLCJmaWxlIjoiZXh0ZW5zaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVQREFURSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IGVtcHR5LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgY29uY2F0TWFwLCBkZWJvdW5jZVRpbWUsIGZpbHRlciwgbWFwLCBzaGFyZSwgc3dpdGNoTWFwLCB0YWtlLCB0YWtlVW50aWwsIHRpbWVvdXQsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSU1QT1JUX1NUQVRFLCBQRVJGT1JNX0FDVElPTiB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBTVE9SRV9ERVZUT09MU19DT05GSUcsIFN0b3JlRGV2dG9vbHNDb25maWcsIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgRGV2dG9vbHNEaXNwYXRjaGVyIH0gZnJvbSAnLi9kZXZ0b29scy1kaXNwYXRjaGVyJztcbmltcG9ydCB7IGlzQWN0aW9uRmlsdGVyZWQsIHNhbml0aXplQWN0aW9uLCBzYW5pdGl6ZUFjdGlvbnMsIHNhbml0aXplU3RhdGUsIHNhbml0aXplU3RhdGVzLCBzaG91bGRGaWx0ZXJBY3Rpb25zLCB1bmxpZnRTdGF0ZSwgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCB2YXIgRXh0ZW5zaW9uQWN0aW9uVHlwZXMgPSB7XG4gICAgU1RBUlQ6ICdTVEFSVCcsXG4gICAgRElTUEFUQ0g6ICdESVNQQVRDSCcsXG4gICAgU1RPUDogJ1NUT1AnLFxuICAgIEFDVElPTjogJ0FDVElPTicsXG59O1xuZXhwb3J0IHZhciBSRURVWF9ERVZUT09MU19FWFRFTlNJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1JlZHV4IERldnRvb2xzIEV4dGVuc2lvbicpO1xudmFyIERldnRvb2xzRXh0ZW5zaW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERldnRvb2xzRXh0ZW5zaW9uKGRldnRvb2xzRXh0ZW5zaW9uLCBjb25maWcsIGRpc3BhdGNoZXIpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG4gICAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24gPSBkZXZ0b29sc0V4dGVuc2lvbjtcbiAgICAgICAgdGhpcy5jcmVhdGVBY3Rpb25TdHJlYW1zKCk7XG4gICAgfVxuICAgIERldnRvb2xzRXh0ZW5zaW9uLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZGV2dG9vbHNFeHRlbnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGFjdGlvbiByZXF1aXJlcyBhIGZ1bGwgdXBkYXRlIG9mIHRoZSBsaWZ0ZWRTdGF0ZS5cbiAgICAgICAgLy8gSWYgaXQgaXMgYSBzaW1wbGUgYWN0aW9uIGdlbmVyYXRlZCBieSB0aGUgdXNlcidzIGFwcCBhbmQgdGhlIHJlY29yZGluZ1xuICAgICAgICAvLyBpcyBub3QgbG9ja2VkL3BhdXNlZCwgb25seSBzZW5kIHRoZSBhY3Rpb24gYW5kIHRoZSBjdXJyZW50IHN0YXRlIChmYXN0KS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQSBmdWxsIGxpZnRlZFN0YXRlIHVwZGF0ZSAoc2xvdzogc2VyaWFsaXplcyB0aGUgZW50aXJlIGxpZnRlZFN0YXRlKSBpc1xuICAgICAgICAvLyBvbmx5IHJlcXVpcmVkIHdoZW46XG4gICAgICAgIC8vICAgYSkgcmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uIGZpcmVzIHRoZSBAQEluaXQgYWN0aW9uIChpZ25vcmVkIGJ5XG4gICAgICAgIC8vICAgICAgQG5ncngvc3RvcmUtZGV2dG9vbHMpXG4gICAgICAgIC8vICAgYikgYW4gYWN0aW9uIGlzIGdlbmVyYXRlZCBieSBhbiBAbmdyeCBtb2R1bGUgKGUuZy4gQG5ncngvZWZmZWN0cy9pbml0XG4gICAgICAgIC8vICAgICAgb3IgQG5ncngvc3RvcmUvdXBkYXRlLXJlZHVjZXJzKVxuICAgICAgICAvLyAgIGMpIHRoZSBzdGF0ZSBoYXMgYmVlbiByZWNvbXB1dGVkIGR1ZSB0byB0aW1lLXRyYXZlbGluZ1xuICAgICAgICAvLyAgIGQpIGFueSBhY3Rpb24gdGhhdCBpcyBub3QgYSBQZXJmb3JtQWN0aW9uIHRvIGVyciBvbiB0aGUgc2lkZSBvZlxuICAgICAgICAvLyAgICAgIGNhdXRpb24uXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gUEVSRk9STV9BQ1RJT04pIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0xvY2tlZCB8fCBzdGF0ZS5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSB1bmxpZnRTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRmlsdGVyQWN0aW9ucyh0aGlzLmNvbmZpZykgJiZcbiAgICAgICAgICAgICAgICBpc0FjdGlvbkZpbHRlcmVkKGN1cnJlbnRTdGF0ZSwgYWN0aW9uLCB0aGlzLmNvbmZpZy5wcmVkaWNhdGUsIHRoaXMuY29uZmlnLmFjdGlvbnNTYWZlbGlzdCwgdGhpcy5jb25maWcuYWN0aW9uc0Jsb2NrbGlzdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2FuaXRpemVkU3RhdGVfMSA9IHRoaXMuY29uZmlnLnN0YXRlU2FuaXRpemVyXG4gICAgICAgICAgICAgICAgPyBzYW5pdGl6ZVN0YXRlKHRoaXMuY29uZmlnLnN0YXRlU2FuaXRpemVyLCBjdXJyZW50U3RhdGUsIHN0YXRlLmN1cnJlbnRTdGF0ZUluZGV4KVxuICAgICAgICAgICAgICAgIDogY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgdmFyIHNhbml0aXplZEFjdGlvbl8xID0gdGhpcy5jb25maWcuYWN0aW9uU2FuaXRpemVyXG4gICAgICAgICAgICAgICAgPyBzYW5pdGl6ZUFjdGlvbih0aGlzLmNvbmZpZy5hY3Rpb25TYW5pdGl6ZXIsIGFjdGlvbiwgc3RhdGUubmV4dEFjdGlvbklkKVxuICAgICAgICAgICAgICAgIDogYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZW5kVG9SZWR1eERldnRvb2xzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXh0ZW5zaW9uQ29ubmVjdGlvbi5zZW5kKHNhbml0aXplZEFjdGlvbl8xLCBzYW5pdGl6ZWRTdGF0ZV8xKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVxdWlyZXMgZnVsbCBzdGF0ZSB1cGRhdGVcbiAgICAgICAgICAgIHZhciBzYW5pdGl6ZWRMaWZ0ZWRTdGF0ZV8xID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgc3RhdGUsIHsgc3RhZ2VkQWN0aW9uSWRzOiBzdGF0ZS5zdGFnZWRBY3Rpb25JZHMsIGFjdGlvbnNCeUlkOiB0aGlzLmNvbmZpZy5hY3Rpb25TYW5pdGl6ZXJcbiAgICAgICAgICAgICAgICAgICAgPyBzYW5pdGl6ZUFjdGlvbnModGhpcy5jb25maWcuYWN0aW9uU2FuaXRpemVyLCBzdGF0ZS5hY3Rpb25zQnlJZClcbiAgICAgICAgICAgICAgICAgICAgOiBzdGF0ZS5hY3Rpb25zQnlJZCwgY29tcHV0ZWRTdGF0ZXM6IHRoaXMuY29uZmlnLnN0YXRlU2FuaXRpemVyXG4gICAgICAgICAgICAgICAgICAgID8gc2FuaXRpemVTdGF0ZXModGhpcy5jb25maWcuc3RhdGVTYW5pdGl6ZXIsIHN0YXRlLmNvbXB1dGVkU3RhdGVzKVxuICAgICAgICAgICAgICAgICAgICA6IHN0YXRlLmNvbXB1dGVkU3RhdGVzIH0pO1xuICAgICAgICAgICAgdGhpcy5zZW5kVG9SZWR1eERldnRvb2xzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZGV2dG9vbHNFeHRlbnNpb24uc2VuZChudWxsLCBzYW5pdGl6ZWRMaWZ0ZWRTdGF0ZV8xLCBfdGhpcy5nZXRFeHRlbnNpb25Db25maWcoX3RoaXMuY29uZmlnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV2dG9vbHNFeHRlbnNpb24ucHJvdG90eXBlLmNyZWF0ZUNoYW5nZXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZGV2dG9vbHNFeHRlbnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBfdGhpcy5kZXZ0b29sc0V4dGVuc2lvbi5jb25uZWN0KF90aGlzLmdldEV4dGVuc2lvbkNvbmZpZyhfdGhpcy5jb25maWcpKTtcbiAgICAgICAgICAgIF90aGlzLmV4dGVuc2lvbkNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5pbml0KCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnN1YnNjcmliZShmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQoY2hhbmdlKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi51bnN1YnNjcmliZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEZXZ0b29sc0V4dGVuc2lvbi5wcm90b3R5cGUuY3JlYXRlQWN0aW9uU3RyZWFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gTGlzdGVucyB0byBhbGwgY2hhbmdlc1xuICAgICAgICB2YXIgY2hhbmdlcyQgPSB0aGlzLmNyZWF0ZUNoYW5nZXNPYnNlcnZhYmxlKCkucGlwZShzaGFyZSgpKTtcbiAgICAgICAgLy8gTGlzdGVuIGZvciB0aGUgc3RhcnQgYWN0aW9uXG4gICAgICAgIHZhciBzdGFydCQgPSBjaGFuZ2VzJC5waXBlKGZpbHRlcihmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UudHlwZSA9PT0gRXh0ZW5zaW9uQWN0aW9uVHlwZXMuU1RBUlQ7IH0pKTtcbiAgICAgICAgLy8gTGlzdGVuIGZvciB0aGUgc3RvcCBhY3Rpb25cbiAgICAgICAgdmFyIHN0b3AkID0gY2hhbmdlcyQucGlwZShmaWx0ZXIoZnVuY3Rpb24gKGNoYW5nZSkgeyByZXR1cm4gY2hhbmdlLnR5cGUgPT09IEV4dGVuc2lvbkFjdGlvblR5cGVzLlNUT1A7IH0pKTtcbiAgICAgICAgLy8gTGlzdGVuIGZvciBsaWZ0ZWQgYWN0aW9uc1xuICAgICAgICB2YXIgbGlmdGVkQWN0aW9ucyQgPSBjaGFuZ2VzJC5waXBlKGZpbHRlcihmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UudHlwZSA9PT0gRXh0ZW5zaW9uQWN0aW9uVHlwZXMuRElTUEFUQ0g7IH0pLCBtYXAoZnVuY3Rpb24gKGNoYW5nZSkgeyByZXR1cm4gX3RoaXMudW53cmFwQWN0aW9uKGNoYW5nZS5wYXlsb2FkKTsgfSksIGNvbmNhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IElNUE9SVF9TVEFURSkge1xuICAgICAgICAgICAgICAgIC8vIFN0YXRlIGltcG9ydHMgbWF5IGhhcHBlbiBpbiB0d28gc2l0dWF0aW9uczpcbiAgICAgICAgICAgICAgICAvLyAxLiBFeHBsaWNpdGx5IGJ5IHVzZXJcbiAgICAgICAgICAgICAgICAvLyAyLiBVc2VyIGFjdGl2YXRlZCB0aGUgXCJwZXJzaXN0IHN0YXRlIGFjY3Jvc3MgcmVsb2Fkc1wiIG9wdGlvblxuICAgICAgICAgICAgICAgIC8vICAgIGFuZCBub3cgdGhlIHN0YXRlIGlzIGltcG9ydGVkIGR1cmluZyByZWxvYWQuXG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSBvZiBvcHRpb24gMiwgd2UgbmVlZCB0byBnaXZlIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgLy8gbGF6eSBsb2FkZWQgcmVkdWNlcnMgdGltZSB0byBpbnN0YW50aWF0ZS5cbiAgICAgICAgICAgICAgICAvLyBBcyBzb29uIGFzIHRoZXJlIGlzIG5vIFVQREFURSBhY3Rpb24gd2l0aGluIDEgc2Vjb25kLFxuICAgICAgICAgICAgICAgIC8vIGl0IGlzIGFzc3VtZWQgdGhhdCBhbGwgcmVkdWNlcnMgYXJlIGxvYWRlZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZGlzcGF0Y2hlci5waXBlKGZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24udHlwZSA9PT0gVVBEQVRFOyB9KSwgdGltZW91dCgxMDAwKSwgZGVib3VuY2VUaW1lKDEwMDApLCBtYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gYWN0aW9uOyB9KSwgY2F0Y2hFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBvZihhY3Rpb24pOyB9KSwgdGFrZSgxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YoYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBMaXN0ZW4gZm9yIHVubGlmdGVkIGFjdGlvbnNcbiAgICAgICAgdmFyIGFjdGlvbnMkID0gY2hhbmdlcyQucGlwZShmaWx0ZXIoZnVuY3Rpb24gKGNoYW5nZSkgeyByZXR1cm4gY2hhbmdlLnR5cGUgPT09IEV4dGVuc2lvbkFjdGlvblR5cGVzLkFDVElPTjsgfSksIG1hcChmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBfdGhpcy51bndyYXBBY3Rpb24oY2hhbmdlLnBheWxvYWQpOyB9KSk7XG4gICAgICAgIHZhciBhY3Rpb25zVW50aWxTdG9wJCA9IGFjdGlvbnMkLnBpcGUodGFrZVVudGlsKHN0b3AkKSk7XG4gICAgICAgIHZhciBsaWZ0ZWRVbnRpbFN0b3AkID0gbGlmdGVkQWN0aW9ucyQucGlwZSh0YWtlVW50aWwoc3RvcCQpKTtcbiAgICAgICAgdGhpcy5zdGFydCQgPSBzdGFydCQucGlwZSh0YWtlVW50aWwoc3RvcCQpKTtcbiAgICAgICAgLy8gT25seSB0YWtlIHRoZSBhY3Rpb24gc291cmNlcyBiZXR3ZWVuIHRoZSBzdGFydC9zdG9wIGV2ZW50c1xuICAgICAgICB0aGlzLmFjdGlvbnMkID0gdGhpcy5zdGFydCQucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gYWN0aW9uc1VudGlsU3RvcCQ7IH0pKTtcbiAgICAgICAgdGhpcy5saWZ0ZWRBY3Rpb25zJCA9IHRoaXMuc3RhcnQkLnBpcGUoc3dpdGNoTWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpZnRlZFVudGlsU3RvcCQ7IH0pKTtcbiAgICB9O1xuICAgIERldnRvb2xzRXh0ZW5zaW9uLnByb3RvdHlwZS51bndyYXBBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyA/IGV2YWwoXCIoXCIgKyBhY3Rpb24gKyBcIilcIikgOiBhY3Rpb247XG4gICAgfTtcbiAgICBEZXZ0b29sc0V4dGVuc2lvbi5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB2YXIgZXh0ZW5zaW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5hbWU6IGNvbmZpZy5uYW1lLFxuICAgICAgICAgICAgZmVhdHVyZXM6IGNvbmZpZy5mZWF0dXJlcyxcbiAgICAgICAgICAgIHNlcmlhbGl6ZTogY29uZmlnLnNlcmlhbGl6ZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbmZpZy5tYXhBZ2UgIT09IGZhbHNlIC8qIHN1cHBvcnQgPT09IDAgKi8pIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbk9wdGlvbnMubWF4QWdlID0gY29uZmlnLm1heEFnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uT3B0aW9ucztcbiAgICB9O1xuICAgIERldnRvb2xzRXh0ZW5zaW9uLnByb3RvdHlwZS5zZW5kVG9SZWR1eERldnRvb2xzID0gZnVuY3Rpb24gKHNlbmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0BuZ3J4L3N0b3JlLWRldnRvb2xzOiBzb21ldGhpbmcgd2VudCB3cm9uZyBpbnNpZGUgdGhlIHJlZHV4IGRldnRvb2xzJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGV2dG9vbHNFeHRlbnNpb24gPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBJbmplY3QoU1RPUkVfREVWVE9PTFNfQ09ORklHKSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3QsIFN0b3JlRGV2dG9vbHNDb25maWcsXG4gICAgICAgICAgICBEZXZ0b29sc0Rpc3BhdGNoZXJdKVxuICAgIF0sIERldnRvb2xzRXh0ZW5zaW9uKTtcbiAgICByZXR1cm4gRGV2dG9vbHNFeHRlbnNpb247XG59KCkpO1xuZXhwb3J0IHsgRGV2dG9vbHNFeHRlbnNpb24gfTtcbiJdfQ==